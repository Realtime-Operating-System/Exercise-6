
Task6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003504  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080036a4  080036a4  000046a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003728  08003728  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  08003728  08003728  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003728  08003728  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003728  08003728  00004728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800372c  0800372c  0000472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003730  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004978  20000014  08003744  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000498c  08003744  0000598c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7df  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d3  00000000  00000000  00011823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  000139f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c0  00000000  00000000  00014598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002411  00000000  00000000  00014e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be1f  00000000  00000000  00017269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c063  00000000  00000000  00023088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af0eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ee8  00000000  00000000  000af130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b2018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800368c 	.word	0x0800368c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800368c 	.word	0x0800368c

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  HAL_Init();
 80001e4:	f000 f97a 	bl	80004dc <HAL_Init>
  SystemClock_Config();
 80001e8:	f000 f824 	bl	8000234 <SystemClock_Config>
  MX_GPIO_Init();
 80001ec:	f000 f82a 	bl	8000244 <MX_GPIO_Init>

  osKernelInitialize();
 80001f0:	f000 fc92 	bl	8000b18 <osKernelInitialize>
  FlashGreenLEDTaskHandle = osThreadNew(FlashGreenLED, NULL, &FlashGreenLEDTask_attributes);
 80001f4:	4a09      	ldr	r2, [pc, #36]	@ (800021c <main+0x3c>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4809      	ldr	r0, [pc, #36]	@ (8000220 <main+0x40>)
 80001fa:	f000 fcd7 	bl	8000bac <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a08      	ldr	r2, [pc, #32]	@ (8000224 <main+0x44>)
 8000202:	6013      	str	r3, [r2, #0]
  FlashRedLEDTaskHandle = osThreadNew(FlashRedLED, NULL, &FlashRedLEDTask_attributes);
 8000204:	4a08      	ldr	r2, [pc, #32]	@ (8000228 <main+0x48>)
 8000206:	2100      	movs	r1, #0
 8000208:	4808      	ldr	r0, [pc, #32]	@ (800022c <main+0x4c>)
 800020a:	f000 fccf 	bl	8000bac <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a07      	ldr	r2, [pc, #28]	@ (8000230 <main+0x50>)
 8000212:	6013      	str	r3, [r2, #0]
  osKernelStart();
 8000214:	f000 fca4 	bl	8000b60 <osKernelStart>

  while (1)
 8000218:	bf00      	nop
 800021a:	e7fd      	b.n	8000218 <main+0x38>
 800021c:	080036e0 	.word	0x080036e0
 8000220:	080002d5 	.word	0x080002d5
 8000224:	20000030 	.word	0x20000030
 8000228:	08003704 	.word	0x08003704
 800022c:	0800030d 	.word	0x0800030d
 8000230:	20000034 	.word	0x20000034

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* Configure the system clock as needed */
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
	...

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b088      	sub	sp, #32
 8000248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /* Enable Clock for GPIO Port */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	4b1a      	ldr	r3, [pc, #104]	@ (80002c8 <MX_GPIO_Init+0x84>)
 8000260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000262:	4a19      	ldr	r2, [pc, #100]	@ (80002c8 <MX_GPIO_Init+0x84>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6313      	str	r3, [r2, #48]	@ 0x30
 800026a:	4b17      	ldr	r3, [pc, #92]	@ (80002c8 <MX_GPIO_Init+0x84>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <MX_GPIO_Init+0x84>)
 800027c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027e:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <MX_GPIO_Init+0x84>)
 8000280:	f043 0302 	orr.w	r3, r3, #2
 8000284:	6313      	str	r3, [r2, #48]	@ 0x30
 8000286:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <MX_GPIO_Init+0x84>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	f003 0302 	and.w	r3, r3, #2
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin for Green LED (PA5), Red LED (PB0), and Blue LED (PB7) */
  GPIO_InitStruct.Pin = GPIO_PIN_5; // Green LED on PA5
 8000292:	2320      	movs	r3, #32
 8000294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	2301      	movs	r3, #1
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	4619      	mov	r1, r3
 80002a8:	4808      	ldr	r0, [pc, #32]	@ (80002cc <MX_GPIO_Init+0x88>)
 80002aa:	f000 fa63 	bl	8000774 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_7; // Red LED (PB0) and Blue LED (PB7)
 80002ae:	2381      	movs	r3, #129	@ 0x81
 80002b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	4619      	mov	r1, r3
 80002b8:	4805      	ldr	r0, [pc, #20]	@ (80002d0 <MX_GPIO_Init+0x8c>)
 80002ba:	f000 fa5b 	bl	8000774 <HAL_GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	3720      	adds	r7, #32
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40020400 	.word	0x40020400

080002d4 <FlashGreenLED>:
  * @brief Function implementing the FlashGreenLED task.
  * @param argument: Not used
  * @retval None
  */
void FlashGreenLED(void *argument)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2120      	movs	r1, #32
 80002e0:	4809      	ldr	r0, [pc, #36]	@ (8000308 <FlashGreenLED+0x34>)
 80002e2:	f000 fbcb 	bl	8000a7c <HAL_GPIO_WritePin>
	  taskENTER_CRITICAL();
 80002e6:	f002 fe87 	bl	8002ff8 <vPortEnterCritical>
	  AccessSharedData();
 80002ea:	f000 f82b 	bl	8000344 <AccessSharedData>
	  taskEXIT_CRITICAL();
 80002ee:	f002 feb5 	bl	800305c <vPortExitCritical>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2120      	movs	r1, #32
 80002f6:	4804      	ldr	r0, [pc, #16]	@ (8000308 <FlashGreenLED+0x34>)
 80002f8:	f000 fbc0 	bl	8000a7c <HAL_GPIO_WritePin>
	  osDelay(500);
 80002fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000300:	f000 fce6 	bl	8000cd0 <osDelay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000304:	bf00      	nop
 8000306:	e7e9      	b.n	80002dc <FlashGreenLED+0x8>
 8000308:	40020000 	.word	0x40020000

0800030c <FlashRedLED>:
  * @brief Function implementing the FlashRedLED task.
  * @param argument: Not used
  * @retval None
  */
void FlashRedLED(void *argument)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2101      	movs	r1, #1
 8000318:	4809      	ldr	r0, [pc, #36]	@ (8000340 <FlashRedLED+0x34>)
 800031a:	f000 fbaf 	bl	8000a7c <HAL_GPIO_WritePin>
	  taskENTER_CRITICAL();
 800031e:	f002 fe6b 	bl	8002ff8 <vPortEnterCritical>
	  AccessSharedData();
 8000322:	f000 f80f 	bl	8000344 <AccessSharedData>
	  taskEXIT_CRITICAL();
 8000326:	f002 fe99 	bl	800305c <vPortExitCritical>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2101      	movs	r1, #1
 800032e:	4804      	ldr	r0, [pc, #16]	@ (8000340 <FlashRedLED+0x34>)
 8000330:	f000 fba4 	bl	8000a7c <HAL_GPIO_WritePin>
	  osDelay(100);
 8000334:	2064      	movs	r0, #100	@ 0x64
 8000336:	f000 fccb 	bl	8000cd0 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800033a:	bf00      	nop
 800033c:	e7ea      	b.n	8000314 <FlashRedLED+0x8>
 800033e:	bf00      	nop
 8000340:	40020400 	.word	0x40020400

08000344 <AccessSharedData>:
/**
  * @brief Access shared data and check for collisions with critical section.
  * @retval None
  */
void AccessSharedData(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  if (start_flag == 1)
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <AccessSharedData+0x38>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d103      	bne.n	8000358 <AccessSharedData+0x14>
  {
    start_flag = 0;
 8000350:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <AccessSharedData+0x38>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	e004      	b.n	8000362 <AccessSharedData+0x1e>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	2180      	movs	r1, #128	@ 0x80
 800035c:	4808      	ldr	r0, [pc, #32]	@ (8000380 <AccessSharedData+0x3c>)
 800035e:	f000 fb8d 	bl	8000a7c <HAL_GPIO_WritePin>
  }
  SimulateReadWriteOperation();
 8000362:	f000 f80f 	bl	8000384 <SimulateReadWriteOperation>
  start_flag = 1;
 8000366:	4b05      	ldr	r3, [pc, #20]	@ (800037c <AccessSharedData+0x38>)
 8000368:	2201      	movs	r2, #1
 800036a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2180      	movs	r1, #128	@ 0x80
 8000370:	4803      	ldr	r0, [pc, #12]	@ (8000380 <AccessSharedData+0x3c>)
 8000372:	f000 fb83 	bl	8000a7c <HAL_GPIO_WritePin>
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000000 	.word	0x20000000
 8000380:	40020400 	.word	0x40020400

08000384 <SimulateReadWriteOperation>:

/* USER CODE BEGIN 4 */
void SimulateReadWriteOperation(void) {
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
	volatile uint32_t delay_count = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	603b      	str	r3, [r7, #0]
	const uint32_t delay_target = 1000000;
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <SimulateReadWriteOperation+0x34>)
 8000390:	607b      	str	r3, [r7, #4]
	for (delay_count = 0; delay_count < delay_target; delay_count++) {
 8000392:	2300      	movs	r3, #0
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	e003      	b.n	80003a0 <SimulateReadWriteOperation+0x1c>
	__asm("nop");
 8000398:	bf00      	nop
	for (delay_count = 0; delay_count < delay_target; delay_count++) {
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d8f7      	bhi.n	8000398 <SimulateReadWriteOperation+0x14>
	}
}
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	000f4240 	.word	0x000f4240

080003bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <HAL_MspInit+0x54>)
 80003c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003ca:	4a11      	ldr	r2, [pc, #68]	@ (8000410 <HAL_MspInit+0x54>)
 80003cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80003d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <HAL_MspInit+0x54>)
 80003d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	2300      	movs	r3, #0
 80003e0:	603b      	str	r3, [r7, #0]
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <HAL_MspInit+0x54>)
 80003e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <HAL_MspInit+0x54>)
 80003e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <HAL_MspInit+0x54>)
 80003f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	210f      	movs	r1, #15
 80003fe:	f06f 0001 	mvn.w	r0, #1
 8000402:	f000 f98e 	bl	8000722 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800

08000414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <NMI_Handler+0x4>

0800041c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <HardFault_Handler+0x4>

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <MemManage_Handler+0x4>

0800042c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <UsageFault_Handler+0x4>

0800043c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044e:	f000 f897 	bl	8000580 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000452:	f002 f865 	bl	8002520 <xTaskGetSchedulerState>
 8000456:	4603      	mov	r3, r0
 8000458:	2b01      	cmp	r3, #1
 800045a:	d001      	beq.n	8000460 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800045c:	f002 fe5c 	bl	8003118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <SystemInit+0x20>)
 800046a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800046e:	4a05      	ldr	r2, [pc, #20]	@ (8000484 <SystemInit+0x20>)
 8000470:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000474:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	e000ed00 	.word	0xe000ed00

08000488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000488:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800048c:	f7ff ffea 	bl	8000464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000490:	480c      	ldr	r0, [pc, #48]	@ (80004c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000492:	490d      	ldr	r1, [pc, #52]	@ (80004c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000494:	4a0d      	ldr	r2, [pc, #52]	@ (80004cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000498:	e002      	b.n	80004a0 <LoopCopyDataInit>

0800049a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800049c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800049e:	3304      	adds	r3, #4

080004a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a4:	d3f9      	bcc.n	800049a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004a6:	4a0a      	ldr	r2, [pc, #40]	@ (80004d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004a8:	4c0a      	ldr	r4, [pc, #40]	@ (80004d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ac:	e001      	b.n	80004b2 <LoopFillZerobss>

080004ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b0:	3204      	adds	r2, #4

080004b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b4:	d3fb      	bcc.n	80004ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004b6:	f003 f8b7 	bl	8003628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ba:	f7ff fe91 	bl	80001e0 <main>
  bx  lr    
 80004be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80004cc:	08003730 	.word	0x08003730
  ldr r2, =_sbss
 80004d0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80004d4:	2000498c 	.word	0x2000498c

080004d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC_IRQHandler>
	...

080004dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e0:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0d      	ldr	r2, [pc, #52]	@ (800051c <HAL_Init+0x40>)
 80004e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0a      	ldr	r2, [pc, #40]	@ (800051c <HAL_Init+0x40>)
 80004f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <HAL_Init+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a07      	ldr	r2, [pc, #28]	@ (800051c <HAL_Init+0x40>)
 80004fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000504:	2003      	movs	r0, #3
 8000506:	f000 f901 	bl	800070c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050a:	200f      	movs	r0, #15
 800050c:	f000 f808 	bl	8000520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000510:	f7ff ff54 	bl	80003bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40023c00 	.word	0x40023c00

08000520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000528:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <HAL_InitTick+0x54>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <HAL_InitTick+0x58>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000536:	fbb3 f3f1 	udiv	r3, r3, r1
 800053a:	fbb2 f3f3 	udiv	r3, r2, r3
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f90b 	bl	800075a <HAL_SYSTICK_Config>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	e00e      	b.n	800056c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0f      	cmp	r3, #15
 8000552:	d80a      	bhi.n	800056a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000554:	2200      	movs	r2, #0
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800055c:	f000 f8e1 	bl	8000722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000560:	4a06      	ldr	r2, [pc, #24]	@ (800057c <HAL_InitTick+0x5c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000566:	2300      	movs	r3, #0
 8000568:	e000      	b.n	800056c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000004 	.word	0x20000004
 8000578:	2000000c 	.word	0x2000000c
 800057c:	20000008 	.word	0x20000008

08000580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <HAL_IncTick+0x20>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_IncTick+0x24>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4413      	add	r3, r2
 8000590:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <HAL_IncTick+0x24>)
 8000592:	6013      	str	r3, [r2, #0]
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	2000000c 	.word	0x2000000c
 80005a4:	20000038 	.word	0x20000038

080005a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005c4:	4013      	ands	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005da:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	60d3      	str	r3, [r2, #12]
}
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <__NVIC_GetPriorityGrouping+0x18>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	f003 0307 	and.w	r3, r3, #7
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	db0a      	blt.n	8000636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	490c      	ldr	r1, [pc, #48]	@ (8000658 <__NVIC_SetPriority+0x4c>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	0112      	lsls	r2, r2, #4
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	440b      	add	r3, r1
 8000630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000634:	e00a      	b.n	800064c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4908      	ldr	r1, [pc, #32]	@ (800065c <__NVIC_SetPriority+0x50>)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	3b04      	subs	r3, #4
 8000644:	0112      	lsls	r2, r2, #4
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	440b      	add	r3, r1
 800064a:	761a      	strb	r2, [r3, #24]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000660:	b480      	push	{r7}
 8000662:	b089      	sub	sp, #36	@ 0x24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	f1c3 0307 	rsb	r3, r3, #7
 800067a:	2b04      	cmp	r3, #4
 800067c:	bf28      	it	cs
 800067e:	2304      	movcs	r3, #4
 8000680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3304      	adds	r3, #4
 8000686:	2b06      	cmp	r3, #6
 8000688:	d902      	bls.n	8000690 <NVIC_EncodePriority+0x30>
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3b03      	subs	r3, #3
 800068e:	e000      	b.n	8000692 <NVIC_EncodePriority+0x32>
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	43da      	mvns	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	401a      	ands	r2, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	43d9      	mvns	r1, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	4313      	orrs	r3, r2
         );
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3724      	adds	r7, #36	@ 0x24
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006d8:	d301      	bcc.n	80006de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006da:	2301      	movs	r3, #1
 80006dc:	e00f      	b.n	80006fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006de:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <SysTick_Config+0x40>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006e6:	210f      	movs	r1, #15
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006ec:	f7ff ff8e 	bl	800060c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <SysTick_Config+0x40>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006f6:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <SysTick_Config+0x40>)
 80006f8:	2207      	movs	r2, #7
 80006fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	e000e010 	.word	0xe000e010

0800070c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff47 	bl	80005a8 <__NVIC_SetPriorityGrouping>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000722:	b580      	push	{r7, lr}
 8000724:	b086      	sub	sp, #24
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
 800072e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000734:	f7ff ff5c 	bl	80005f0 <__NVIC_GetPriorityGrouping>
 8000738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	6978      	ldr	r0, [r7, #20]
 8000740:	f7ff ff8e 	bl	8000660 <NVIC_EncodePriority>
 8000744:	4602      	mov	r2, r0
 8000746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff5d 	bl	800060c <__NVIC_SetPriority>
}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ffb0 	bl	80006c8 <SysTick_Config>
 8000768:	4603      	mov	r3, r0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	@ 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	e159      	b.n	8000a44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000790:	2201      	movs	r2, #1
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	4013      	ands	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	f040 8148 	bne.w	8000a3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d005      	beq.n	80007c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d130      	bne.n	8000828 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	2203      	movs	r2, #3
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	4013      	ands	r3, r2
 80007dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	68da      	ldr	r2, [r3, #12]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	69ba      	ldr	r2, [r7, #24]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	69ba      	ldr	r2, [r7, #24]
 80007f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007fc:	2201      	movs	r2, #1
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	69ba      	ldr	r2, [r7, #24]
 8000808:	4013      	ands	r3, r2
 800080a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	091b      	lsrs	r3, r3, #4
 8000812:	f003 0201 	and.w	r2, r3, #1
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	4313      	orrs	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f003 0303 	and.w	r3, r3, #3
 8000830:	2b03      	cmp	r3, #3
 8000832:	d017      	beq.n	8000864 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2203      	movs	r2, #3
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4013      	ands	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	4313      	orrs	r3, r2
 800085c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f003 0303 	and.w	r3, r3, #3
 800086c:	2b02      	cmp	r3, #2
 800086e:	d123      	bne.n	80008b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	08da      	lsrs	r2, r3, #3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3208      	adds	r2, #8
 8000878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	f003 0307 	and.w	r3, r3, #7
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	220f      	movs	r2, #15
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	691a      	ldr	r2, [r3, #16]
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	08da      	lsrs	r2, r3, #3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3208      	adds	r2, #8
 80008b2:	69b9      	ldr	r1, [r7, #24]
 80008b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2203      	movs	r2, #3
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0203 	and.w	r2, r3, #3
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 80a2 	beq.w	8000a3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b57      	ldr	r3, [pc, #348]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a56      	ldr	r2, [pc, #344]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
 800090a:	4b54      	ldr	r3, [pc, #336]	@ (8000a5c <HAL_GPIO_Init+0x2e8>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000916:	4a52      	ldr	r2, [pc, #328]	@ (8000a60 <HAL_GPIO_Init+0x2ec>)
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	3302      	adds	r3, #2
 800091e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4013      	ands	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a49      	ldr	r2, [pc, #292]	@ (8000a64 <HAL_GPIO_Init+0x2f0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d019      	beq.n	8000976 <HAL_GPIO_Init+0x202>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a48      	ldr	r2, [pc, #288]	@ (8000a68 <HAL_GPIO_Init+0x2f4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d013      	beq.n	8000972 <HAL_GPIO_Init+0x1fe>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a47      	ldr	r2, [pc, #284]	@ (8000a6c <HAL_GPIO_Init+0x2f8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d00d      	beq.n	800096e <HAL_GPIO_Init+0x1fa>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a46      	ldr	r2, [pc, #280]	@ (8000a70 <HAL_GPIO_Init+0x2fc>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d007      	beq.n	800096a <HAL_GPIO_Init+0x1f6>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a45      	ldr	r2, [pc, #276]	@ (8000a74 <HAL_GPIO_Init+0x300>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_GPIO_Init+0x1f2>
 8000962:	2304      	movs	r3, #4
 8000964:	e008      	b.n	8000978 <HAL_GPIO_Init+0x204>
 8000966:	2307      	movs	r3, #7
 8000968:	e006      	b.n	8000978 <HAL_GPIO_Init+0x204>
 800096a:	2303      	movs	r3, #3
 800096c:	e004      	b.n	8000978 <HAL_GPIO_Init+0x204>
 800096e:	2302      	movs	r3, #2
 8000970:	e002      	b.n	8000978 <HAL_GPIO_Init+0x204>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <HAL_GPIO_Init+0x204>
 8000976:	2300      	movs	r3, #0
 8000978:	69fa      	ldr	r2, [r7, #28]
 800097a:	f002 0203 	and.w	r2, r2, #3
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	4093      	lsls	r3, r2
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4313      	orrs	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000988:	4935      	ldr	r1, [pc, #212]	@ (8000a60 <HAL_GPIO_Init+0x2ec>)
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	3302      	adds	r3, #2
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000996:	4b38      	ldr	r3, [pc, #224]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	43db      	mvns	r3, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4013      	ands	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	43db      	mvns	r3, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4013      	ands	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009e4:	4a24      	ldr	r2, [pc, #144]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009ea:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	43db      	mvns	r3, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4013      	ands	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4013      	ands	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a38:	4a0f      	ldr	r2, [pc, #60]	@ (8000a78 <HAL_GPIO_Init+0x304>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3301      	adds	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	2b0f      	cmp	r3, #15
 8000a48:	f67f aea2 	bls.w	8000790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3724      	adds	r7, #36	@ 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40013800 	.word	0x40013800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40013c00 	.word	0x40013c00

08000a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a92:	887a      	ldrh	r2, [r7, #2]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a98:	e003      	b.n	8000aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	041a      	lsls	r2, r3, #16
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	619a      	str	r2, [r3, #24]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <__NVIC_SetPriority>:
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	@ (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f06f 0004 	mvn.w	r0, #4
 8000b0e:	f7ff ffcf 	bl	8000ab0 <__NVIC_SetPriority>
#endif
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000b1e:	f3ef 8305 	mrs	r3, IPSR
 8000b22:	603b      	str	r3, [r7, #0]
  return(result);
 8000b24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8000b2a:	f06f 0305 	mvn.w	r3, #5
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	e00c      	b.n	8000b4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <osKernelInitialize+0x44>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d105      	bne.n	8000b46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <osKernelInitialize+0x44>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	e002      	b.n	8000b4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	2000003c 	.word	0x2000003c

08000b60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000b66:	f3ef 8305 	mrs	r3, IPSR
 8000b6a:	603b      	str	r3, [r7, #0]
  return(result);
 8000b6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8000b72:	f06f 0305 	mvn.w	r3, #5
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	e010      	b.n	8000b9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <osKernelStart+0x48>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d109      	bne.n	8000b96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8000b82:	f7ff ffbf 	bl	8000b04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <osKernelStart+0x48>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8000b8c:	f001 f87a 	bl	8001c84 <vTaskStartScheduler>
      stat = osOK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	e002      	b.n	8000b9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000003c 	.word	0x2000003c

08000bac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	@ 0x38
 8000bb0:	af04      	add	r7, sp, #16
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000bbc:	f3ef 8305 	mrs	r3, IPSR
 8000bc0:	617b      	str	r3, [r7, #20]
  return(result);
 8000bc2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d17e      	bne.n	8000cc6 <osThreadNew+0x11a>
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d07b      	beq.n	8000cc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8000bd2:	2318      	movs	r3, #24
 8000bd4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bde:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d045      	beq.n	8000c72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <osThreadNew+0x48>
        name = attr->name;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d008      	beq.n	8000c1a <osThreadNew+0x6e>
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	2b38      	cmp	r3, #56	@ 0x38
 8000c0c:	d805      	bhi.n	8000c1a <osThreadNew+0x6e>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <osThreadNew+0x72>
        return (NULL);
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e054      	b.n	8000cc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00e      	beq.n	8000c54 <osThreadNew+0xa8>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	2b5b      	cmp	r3, #91	@ 0x5b
 8000c3c:	d90a      	bls.n	8000c54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d006      	beq.n	8000c54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <osThreadNew+0xa8>
        mem = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	e010      	b.n	8000c76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10c      	bne.n	8000c76 <osThreadNew+0xca>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d108      	bne.n	8000c76 <osThreadNew+0xca>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d104      	bne.n	8000c76 <osThreadNew+0xca>
          mem = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	e001      	b.n	8000c76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d110      	bne.n	8000c9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000c84:	9202      	str	r2, [sp, #8]
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	6a3a      	ldr	r2, [r7, #32]
 8000c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f000 fe1a 	bl	80018cc <xTaskCreateStatic>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	e013      	b.n	8000cc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d110      	bne.n	8000cc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f000 fe68 	bl	800198c <xTaskCreate>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d001      	beq.n	8000cc6 <osThreadNew+0x11a>
            hTask = NULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000cc6:	693b      	ldr	r3, [r7, #16]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3728      	adds	r7, #40	@ 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000cd8:	f3ef 8305 	mrs	r3, IPSR
 8000cdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8000cde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <osDelay+0x1c>
    stat = osErrorISR;
 8000ce4:	f06f 0305 	mvn.w	r3, #5
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	e007      	b.n	8000cfc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <osDelay+0x2c>
      vTaskDelay(ticks);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 ff8e 	bl	8001c18 <vTaskDelay>
    }
  }

  return (stat);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <vApplicationGetIdleTaskMemory+0x30>)
 8000d1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2280      	movs	r2, #128	@ 0x80
 8000d24:	601a      	str	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000040 	.word	0x20000040
 8000d38:	2000009c 	.word	0x2000009c

08000d3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4a07      	ldr	r2, [pc, #28]	@ (8000d68 <vApplicationGetTimerTaskMemory+0x2c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	4a06      	ldr	r2, [pc, #24]	@ (8000d6c <vApplicationGetTimerTaskMemory+0x30>)
 8000d52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d5a:	601a      	str	r2, [r3, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	2000029c 	.word	0x2000029c
 8000d6c:	200002f8 	.word	0x200002f8

08000d70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f103 0208 	add.w	r2, r3, #8
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f103 0208 	add.w	r2, r3, #8
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f103 0208 	add.w	r2, r3, #8
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b085      	sub	sp, #20
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	1c5a      	adds	r2, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e28:	d103      	bne.n	8000e32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e00c      	b.n	8000e4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3308      	adds	r3, #8
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	e002      	b.n	8000e40 <vListInsert+0x2e>
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d2f6      	bcs.n	8000e3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691b      	ldr	r3, [r3, #16]
 8000e90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	6892      	ldr	r2, [r2, #8]
 8000e9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6852      	ldr	r2, [r2, #4]
 8000ea4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d103      	bne.n	8000eb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10b      	bne.n	8000f04 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ef0:	f383 8811 	msr	BASEPRI, r3
 8000ef4:	f3bf 8f6f 	isb	sy
 8000ef8:	f3bf 8f4f 	dsb	sy
 8000efc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000f04:	f002 f878 	bl	8002ff8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000f14:	fb01 f303 	mul.w	r3, r1, r3
 8000f18:	441a      	add	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f34:	3b01      	subs	r3, #1
 8000f36:	68f9      	ldr	r1, [r7, #12]
 8000f38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000f3a:	fb01 f303 	mul.w	r3, r1, r3
 8000f3e:	441a      	add	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	22ff      	movs	r2, #255	@ 0xff
 8000f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	22ff      	movs	r2, #255	@ 0xff
 8000f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d114      	bne.n	8000f84 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d01a      	beq.n	8000f98 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3310      	adds	r3, #16
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 f91a 	bl	80021a0 <xTaskRemoveFromEventList>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d012      	beq.n	8000f98 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <xQueueGenericReset+0xd0>)
 8000f74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	f3bf 8f4f 	dsb	sy
 8000f7e:	f3bf 8f6f 	isb	sy
 8000f82:	e009      	b.n	8000f98 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3310      	adds	r3, #16
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fef1 	bl	8000d70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	3324      	adds	r3, #36	@ 0x24
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff feec 	bl	8000d70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000f98:	f002 f860 	bl	800305c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000f9c:	2301      	movs	r3, #1
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000ed04 	.word	0xe000ed04

08000fac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08e      	sub	sp, #56	@ 0x38
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10b      	bne.n	8000fd8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8000fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fc4:	f383 8811 	msr	BASEPRI, r3
 8000fc8:	f3bf 8f6f 	isb	sy
 8000fcc:	f3bf 8f4f 	dsb	sy
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10b      	bne.n	8000ff6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8000fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fe2:	f383 8811 	msr	BASEPRI, r3
 8000fe6:	f3bf 8f6f 	isb	sy
 8000fea:	f3bf 8f4f 	dsb	sy
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	e7fd      	b.n	8000ff2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <xQueueGenericCreateStatic+0x56>
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <xQueueGenericCreateStatic+0x5a>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <xQueueGenericCreateStatic+0x5c>
 8001006:	2300      	movs	r3, #0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10b      	bne.n	8001024 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800100c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001010:	f383 8811 	msr	BASEPRI, r3
 8001014:	f3bf 8f6f 	isb	sy
 8001018:	f3bf 8f4f 	dsb	sy
 800101c:	623b      	str	r3, [r7, #32]
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <xQueueGenericCreateStatic+0x84>
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <xQueueGenericCreateStatic+0x88>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <xQueueGenericCreateStatic+0x8a>
 8001034:	2300      	movs	r3, #0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10b      	bne.n	8001052 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800103a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800103e:	f383 8811 	msr	BASEPRI, r3
 8001042:	f3bf 8f6f 	isb	sy
 8001046:	f3bf 8f4f 	dsb	sy
 800104a:	61fb      	str	r3, [r7, #28]
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001052:	2350      	movs	r3, #80	@ 0x50
 8001054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b50      	cmp	r3, #80	@ 0x50
 800105a:	d00b      	beq.n	8001074 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800105c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001060:	f383 8811 	msr	BASEPRI, r3
 8001064:	f3bf 8f6f 	isb	sy
 8001068:	f3bf 8f4f 	dsb	sy
 800106c:	61bb      	str	r3, [r7, #24]
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001074:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800107a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00d      	beq.n	800109c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001088:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800108c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	4613      	mov	r3, r2
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 f805 	bl	80010a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800109c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800109e:	4618      	mov	r0, r3
 80010a0:	3730      	adds	r7, #48	@ 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d103      	bne.n	80010c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e002      	b.n	80010c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80010d4:	2101      	movs	r1, #1
 80010d6:	69b8      	ldr	r0, [r7, #24]
 80010d8:	f7ff fefe 	bl	8000ed8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	78fa      	ldrb	r2, [r7, #3]
 80010e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	@ 0x38
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001104:	2b00      	cmp	r3, #0
 8001106:	d10b      	bne.n	8001120 <xQueueGenericSend+0x34>
	__asm volatile
 8001108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800110c:	f383 8811 	msr	BASEPRI, r3
 8001110:	f3bf 8f6f 	isb	sy
 8001114:	f3bf 8f4f 	dsb	sy
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <xQueueGenericSend+0x42>
 8001126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <xQueueGenericSend+0x46>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <xQueueGenericSend+0x48>
 8001132:	2300      	movs	r3, #0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <xQueueGenericSend+0x64>
	__asm volatile
 8001138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800113c:	f383 8811 	msr	BASEPRI, r3
 8001140:	f3bf 8f6f 	isb	sy
 8001144:	f3bf 8f4f 	dsb	sy
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d103      	bne.n	800115e <xQueueGenericSend+0x72>
 8001156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <xQueueGenericSend+0x76>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <xQueueGenericSend+0x78>
 8001162:	2300      	movs	r3, #0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10b      	bne.n	8001180 <xQueueGenericSend+0x94>
	__asm volatile
 8001168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800116c:	f383 8811 	msr	BASEPRI, r3
 8001170:	f3bf 8f6f 	isb	sy
 8001174:	f3bf 8f4f 	dsb	sy
 8001178:	623b      	str	r3, [r7, #32]
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001180:	f001 f9ce 	bl	8002520 <xTaskGetSchedulerState>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <xQueueGenericSend+0xa4>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <xQueueGenericSend+0xa8>
 8001190:	2301      	movs	r3, #1
 8001192:	e000      	b.n	8001196 <xQueueGenericSend+0xaa>
 8001194:	2300      	movs	r3, #0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10b      	bne.n	80011b2 <xQueueGenericSend+0xc6>
	__asm volatile
 800119a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800119e:	f383 8811 	msr	BASEPRI, r3
 80011a2:	f3bf 8f6f 	isb	sy
 80011a6:	f3bf 8f4f 	dsb	sy
 80011aa:	61fb      	str	r3, [r7, #28]
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	e7fd      	b.n	80011ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80011b2:	f001 ff21 	bl	8002ff8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80011b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011be:	429a      	cmp	r2, r3
 80011c0:	d302      	bcc.n	80011c8 <xQueueGenericSend+0xdc>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d129      	bne.n	800121c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011ce:	f000 fa0f 	bl	80015f0 <prvCopyDataToQueue>
 80011d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d010      	beq.n	80011fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011de:	3324      	adds	r3, #36	@ 0x24
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 ffdd 	bl	80021a0 <xTaskRemoveFromEventList>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80011ec:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <xQueueGenericSend+0x200>)
 80011ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	f3bf 8f6f 	isb	sy
 80011fc:	e00a      	b.n	8001214 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80011fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001204:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <xQueueGenericSend+0x200>)
 8001206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	f3bf 8f4f 	dsb	sy
 8001210:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001214:	f001 ff22 	bl	800305c <vPortExitCritical>
				return pdPASS;
 8001218:	2301      	movs	r3, #1
 800121a:	e063      	b.n	80012e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d103      	bne.n	800122a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001222:	f001 ff1b 	bl	800305c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001226:	2300      	movs	r3, #0
 8001228:	e05c      	b.n	80012e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800122a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4618      	mov	r0, r3
 8001236:	f001 f817 	bl	8002268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800123a:	2301      	movs	r3, #1
 800123c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800123e:	f001 ff0d 	bl	800305c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001242:	f000 fd87 	bl	8001d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001246:	f001 fed7 	bl	8002ff8 <vPortEnterCritical>
 800124a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800124c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001250:	b25b      	sxtb	r3, r3
 8001252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001256:	d103      	bne.n	8001260 <xQueueGenericSend+0x174>
 8001258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001262:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001266:	b25b      	sxtb	r3, r3
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800126c:	d103      	bne.n	8001276 <xQueueGenericSend+0x18a>
 800126e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001276:	f001 fef1 	bl	800305c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800127a:	1d3a      	adds	r2, r7, #4
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f001 f806 	bl	8002294 <xTaskCheckForTimeOut>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d124      	bne.n	80012d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800128e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001290:	f000 faa6 	bl	80017e0 <prvIsQueueFull>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d018      	beq.n	80012cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800129a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800129c:	3310      	adds	r3, #16
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 ff2a 	bl	80020fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80012a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012aa:	f000 fa31 	bl	8001710 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80012ae:	f000 fd5f 	bl	8001d70 <xTaskResumeAll>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f47f af7c 	bne.w	80011b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <xQueueGenericSend+0x200>)
 80012bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	f3bf 8f4f 	dsb	sy
 80012c6:	f3bf 8f6f 	isb	sy
 80012ca:	e772      	b.n	80011b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80012cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012ce:	f000 fa1f 	bl	8001710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80012d2:	f000 fd4d 	bl	8001d70 <xTaskResumeAll>
 80012d6:	e76c      	b.n	80011b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80012d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012da:	f000 fa19 	bl	8001710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80012de:	f000 fd47 	bl	8001d70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80012e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3738      	adds	r7, #56	@ 0x38
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	e000ed04 	.word	0xe000ed04

080012f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b090      	sub	sp, #64	@ 0x40
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10b      	bne.n	8001320 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800130c:	f383 8811 	msr	BASEPRI, r3
 8001310:	f3bf 8f6f 	isb	sy
 8001314:	f3bf 8f4f 	dsb	sy
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d103      	bne.n	800132e <xQueueGenericSendFromISR+0x3e>
 8001326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <xQueueGenericSendFromISR+0x42>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <xQueueGenericSendFromISR+0x44>
 8001332:	2300      	movs	r3, #0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10b      	bne.n	8001350 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800133c:	f383 8811 	msr	BASEPRI, r3
 8001340:	f3bf 8f6f 	isb	sy
 8001344:	f3bf 8f4f 	dsb	sy
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d103      	bne.n	800135e <xQueueGenericSendFromISR+0x6e>
 8001356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <xQueueGenericSendFromISR+0x72>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <xQueueGenericSendFromISR+0x74>
 8001362:	2300      	movs	r3, #0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10b      	bne.n	8001380 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800136c:	f383 8811 	msr	BASEPRI, r3
 8001370:	f3bf 8f6f 	isb	sy
 8001374:	f3bf 8f4f 	dsb	sy
 8001378:	623b      	str	r3, [r7, #32]
}
 800137a:	bf00      	nop
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001380:	f001 ff1a 	bl	80031b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001384:	f3ef 8211 	mrs	r2, BASEPRI
 8001388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800138c:	f383 8811 	msr	BASEPRI, r3
 8001390:	f3bf 8f6f 	isb	sy
 8001394:	f3bf 8f4f 	dsb	sy
 8001398:	61fa      	str	r2, [r7, #28]
 800139a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800139c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800139e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80013a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d302      	bcc.n	80013b2 <xQueueGenericSendFromISR+0xc2>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d12f      	bne.n	8001412 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80013b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80013b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80013bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80013c8:	f000 f912 	bl	80015f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80013cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013d4:	d112      	bne.n	80013fc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d016      	beq.n	800140c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013e0:	3324      	adds	r3, #36	@ 0x24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fedc 	bl	80021a0 <xTaskRemoveFromEventList>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00e      	beq.n	800140c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00b      	beq.n	800140c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e007      	b.n	800140c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80013fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001400:	3301      	adds	r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	b25a      	sxtb	r2, r3
 8001406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800140c:	2301      	movs	r3, #1
 800140e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001410:	e001      	b.n	8001416 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001412:	2300      	movs	r3, #0
 8001414:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001418:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001420:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001424:	4618      	mov	r0, r3
 8001426:	3740      	adds	r7, #64	@ 0x40
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10b      	bne.n	800145e <xQueueReceive+0x32>
	__asm volatile
 8001446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800144a:	f383 8811 	msr	BASEPRI, r3
 800144e:	f3bf 8f6f 	isb	sy
 8001452:	f3bf 8f4f 	dsb	sy
 8001456:	623b      	str	r3, [r7, #32]
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	e7fd      	b.n	800145a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d103      	bne.n	800146c <xQueueReceive+0x40>
 8001464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <xQueueReceive+0x44>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <xQueueReceive+0x46>
 8001470:	2300      	movs	r3, #0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10b      	bne.n	800148e <xQueueReceive+0x62>
	__asm volatile
 8001476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800147a:	f383 8811 	msr	BASEPRI, r3
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	f3bf 8f4f 	dsb	sy
 8001486:	61fb      	str	r3, [r7, #28]
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	e7fd      	b.n	800148a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800148e:	f001 f847 	bl	8002520 <xTaskGetSchedulerState>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <xQueueReceive+0x72>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <xQueueReceive+0x76>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <xQueueReceive+0x78>
 80014a2:	2300      	movs	r3, #0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <xQueueReceive+0x94>
	__asm volatile
 80014a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014ac:	f383 8811 	msr	BASEPRI, r3
 80014b0:	f3bf 8f6f 	isb	sy
 80014b4:	f3bf 8f4f 	dsb	sy
 80014b8:	61bb      	str	r3, [r7, #24]
}
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80014c0:	f001 fd9a 	bl	8002ff8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01f      	beq.n	8001510 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80014d4:	f000 f8f6 	bl	80016c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80014d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014da:	1e5a      	subs	r2, r3, #1
 80014dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00f      	beq.n	8001508 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ea:	3310      	adds	r3, #16
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fe57 	bl	80021a0 <xTaskRemoveFromEventList>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80014f8:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <xQueueReceive+0x1c0>)
 80014fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	f3bf 8f4f 	dsb	sy
 8001504:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001508:	f001 fda8 	bl	800305c <vPortExitCritical>
				return pdPASS;
 800150c:	2301      	movs	r3, #1
 800150e:	e069      	b.n	80015e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d103      	bne.n	800151e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001516:	f001 fda1 	bl	800305c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800151a:	2300      	movs	r3, #0
 800151c:	e062      	b.n	80015e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800151e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d106      	bne.n	8001532 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fe9d 	bl	8002268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800152e:	2301      	movs	r3, #1
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001532:	f001 fd93 	bl	800305c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001536:	f000 fc0d 	bl	8001d54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800153a:	f001 fd5d 	bl	8002ff8 <vPortEnterCritical>
 800153e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001544:	b25b      	sxtb	r3, r3
 8001546:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800154a:	d103      	bne.n	8001554 <xQueueReceive+0x128>
 800154c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001556:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800155a:	b25b      	sxtb	r3, r3
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001560:	d103      	bne.n	800156a <xQueueReceive+0x13e>
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800156a:	f001 fd77 	bl	800305c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800156e:	1d3a      	adds	r2, r7, #4
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fe8c 	bl	8002294 <xTaskCheckForTimeOut>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d123      	bne.n	80015ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001584:	f000 f916 	bl	80017b4 <prvIsQueueEmpty>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d017      	beq.n	80015be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800158e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001590:	3324      	adds	r3, #36	@ 0x24
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fdb0 	bl	80020fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800159c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800159e:	f000 f8b7 	bl	8001710 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80015a2:	f000 fbe5 	bl	8001d70 <xTaskResumeAll>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d189      	bne.n	80014c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <xQueueReceive+0x1c0>)
 80015ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	f3bf 8f4f 	dsb	sy
 80015b8:	f3bf 8f6f 	isb	sy
 80015bc:	e780      	b.n	80014c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80015be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80015c0:	f000 f8a6 	bl	8001710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80015c4:	f000 fbd4 	bl	8001d70 <xTaskResumeAll>
 80015c8:	e77a      	b.n	80014c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80015ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80015cc:	f000 f8a0 	bl	8001710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80015d0:	f000 fbce 	bl	8001d70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80015d6:	f000 f8ed 	bl	80017b4 <prvIsQueueEmpty>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f43f af6f 	beq.w	80014c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80015e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3730      	adds	r7, #48	@ 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	e000ed04 	.word	0xe000ed04

080015f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001604:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d14d      	bne.n	80016b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 ff9e 	bl	800255c <xTaskPriorityDisinherit>
 8001620:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	e043      	b.n	80016b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d119      	bne.n	8001664 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6858      	ldr	r0, [r3, #4]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	461a      	mov	r2, r3
 800163a:	68b9      	ldr	r1, [r7, #8]
 800163c:	f002 f818 	bl	8003670 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	441a      	add	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	429a      	cmp	r2, r3
 8001658:	d32b      	bcc.n	80016b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e026      	b.n	80016b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	68d8      	ldr	r0, [r3, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	461a      	mov	r2, r3
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	f001 fffe 	bl	8003670 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	425b      	negs	r3, r3
 800167e:	441a      	add	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	425b      	negs	r3, r3
 800169a:	441a      	add	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d105      	bne.n	80016b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80016ba:	697b      	ldr	r3, [r7, #20]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d018      	beq.n	8001708 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	441a      	add	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d303      	bcc.n	80016f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68d9      	ldr	r1, [r3, #12]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	461a      	mov	r2, r3
 8001702:	6838      	ldr	r0, [r7, #0]
 8001704:	f001 ffb4 	bl	8003670 <memcpy>
	}
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001718:	f001 fc6e 	bl	8002ff8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001722:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001724:	e011      	b.n	800174a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	2b00      	cmp	r3, #0
 800172c:	d012      	beq.n	8001754 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3324      	adds	r3, #36	@ 0x24
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fd34 	bl	80021a0 <xTaskRemoveFromEventList>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800173e:	f000 fe0d 	bl	800235c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	3b01      	subs	r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	2b00      	cmp	r3, #0
 8001750:	dce9      	bgt.n	8001726 <prvUnlockQueue+0x16>
 8001752:	e000      	b.n	8001756 <prvUnlockQueue+0x46>
					break;
 8001754:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	22ff      	movs	r2, #255	@ 0xff
 800175a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800175e:	f001 fc7d 	bl	800305c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001762:	f001 fc49 	bl	8002ff8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800176c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800176e:	e011      	b.n	8001794 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d012      	beq.n	800179e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3310      	adds	r3, #16
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fd0f 	bl	80021a0 <xTaskRemoveFromEventList>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001788:	f000 fde8 	bl	800235c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	3b01      	subs	r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001798:	2b00      	cmp	r3, #0
 800179a:	dce9      	bgt.n	8001770 <prvUnlockQueue+0x60>
 800179c:	e000      	b.n	80017a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800179e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	22ff      	movs	r2, #255	@ 0xff
 80017a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80017a8:	f001 fc58 	bl	800305c <vPortExitCritical>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80017bc:	f001 fc1c 	bl	8002ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80017c8:	2301      	movs	r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e001      	b.n	80017d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80017d2:	f001 fc43 	bl	800305c <vPortExitCritical>

	return xReturn;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80017e8:	f001 fc06 	bl	8002ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d102      	bne.n	80017fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80017f8:	2301      	movs	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e001      	b.n	8001802 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001802:	f001 fc2b 	bl	800305c <vPortExitCritical>

	return xReturn;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e014      	b.n	800184a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001820:	4a0f      	ldr	r2, [pc, #60]	@ (8001860 <vQueueAddToRegistry+0x50>)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10b      	bne.n	8001844 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800182c:	490c      	ldr	r1, [pc, #48]	@ (8001860 <vQueueAddToRegistry+0x50>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001836:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <vQueueAddToRegistry+0x50>)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001842:	e006      	b.n	8001852 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3301      	adds	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b07      	cmp	r3, #7
 800184e:	d9e7      	bls.n	8001820 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200006f8 	.word	0x200006f8

08001864 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001874:	f001 fbc0 	bl	8002ff8 <vPortEnterCritical>
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800187e:	b25b      	sxtb	r3, r3
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001884:	d103      	bne.n	800188e <vQueueWaitForMessageRestricted+0x2a>
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001894:	b25b      	sxtb	r3, r3
 8001896:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800189a:	d103      	bne.n	80018a4 <vQueueWaitForMessageRestricted+0x40>
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80018a4:	f001 fbda 	bl	800305c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d106      	bne.n	80018be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3324      	adds	r3, #36	@ 0x24
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	68b9      	ldr	r1, [r7, #8]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fc45 	bl	8002148 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff26 	bl	8001710 <prvUnlockQueue>
	}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	@ 0x38
 80018d0:	af04      	add	r7, sp, #16
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80018da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10b      	bne.n	80018f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80018e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018e4:	f383 8811 	msr	BASEPRI, r3
 80018e8:	f3bf 8f6f 	isb	sy
 80018ec:	f3bf 8f4f 	dsb	sy
 80018f0:	623b      	str	r3, [r7, #32]
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80018f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10b      	bne.n	8001916 <xTaskCreateStatic+0x4a>
	__asm volatile
 80018fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001902:	f383 8811 	msr	BASEPRI, r3
 8001906:	f3bf 8f6f 	isb	sy
 800190a:	f3bf 8f4f 	dsb	sy
 800190e:	61fb      	str	r3, [r7, #28]
}
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	e7fd      	b.n	8001912 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001916:	235c      	movs	r3, #92	@ 0x5c
 8001918:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2b5c      	cmp	r3, #92	@ 0x5c
 800191e:	d00b      	beq.n	8001938 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	f3bf 8f6f 	isb	sy
 800192c:	f3bf 8f4f 	dsb	sy
 8001930:	61bb      	str	r3, [r7, #24]
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001938:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800193a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01e      	beq.n	800197e <xTaskCreateStatic+0xb2>
 8001940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01b      	beq.n	800197e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800194e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	2202      	movs	r2, #2
 8001954:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001958:	2300      	movs	r3, #0
 800195a:	9303      	str	r3, [sp, #12]
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	9302      	str	r3, [sp, #8]
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f850 	bl	8001a16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001976:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001978:	f000 f8de 	bl	8001b38 <prvAddNewTaskToReadyList>
 800197c:	e001      	b.n	8001982 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001982:	697b      	ldr	r3, [r7, #20]
	}
 8001984:	4618      	mov	r0, r3
 8001986:	3728      	adds	r7, #40	@ 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af04      	add	r7, sp, #16
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 fc4b 	bl	800323c <pvPortMalloc>
 80019a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80019ae:	205c      	movs	r0, #92	@ 0x5c
 80019b0:	f001 fc44 	bl	800323c <pvPortMalloc>
 80019b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80019c2:	e005      	b.n	80019d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80019c4:	6978      	ldr	r0, [r7, #20]
 80019c6:	f001 fd07 	bl	80033d8 <vPortFree>
 80019ca:	e001      	b.n	80019d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d017      	beq.n	8001a06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019de:	88fa      	ldrh	r2, [r7, #6]
 80019e0:	2300      	movs	r3, #0
 80019e2:	9303      	str	r3, [sp, #12]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f80e 	bl	8001a16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80019fa:	69f8      	ldr	r0, [r7, #28]
 80019fc:	f000 f89c 	bl	8001b38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001a00:	2301      	movs	r3, #1
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	e002      	b.n	8001a0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001a0c:	69bb      	ldr	r3, [r7, #24]
	}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b088      	sub	sp, #32
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a26:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	21a5      	movs	r1, #165	@ 0xa5
 8001a30:	f001 fdf2 	bl	8003618 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f023 0307 	bic.w	r3, r3, #7
 8001a4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00b      	beq.n	8001a70 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8001a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a5c:	f383 8811 	msr	BASEPRI, r3
 8001a60:	f3bf 8f6f 	isb	sy
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	617b      	str	r3, [r7, #20]
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d01f      	beq.n	8001ab6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
 8001a7a:	e012      	b.n	8001aa2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	4413      	add	r3, r2
 8001a82:	7819      	ldrb	r1, [r3, #0]
 8001a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	3334      	adds	r3, #52	@ 0x34
 8001a8c:	460a      	mov	r2, r1
 8001a8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d9e9      	bls.n	8001a7c <prvInitialiseNewTask+0x66>
 8001aa8:	e000      	b.n	8001aac <prvInitialiseNewTask+0x96>
			{
				break;
 8001aaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ab4:	e003      	b.n	8001abe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac0:	2b37      	cmp	r3, #55	@ 0x37
 8001ac2:	d901      	bls.n	8001ac8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ac4:	2337      	movs	r3, #55	@ 0x37
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001adc:	3304      	adds	r3, #4
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f966 	bl	8000db0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae6:	3318      	adds	r3, #24
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f961 	bl	8000db0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001af2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001afc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b02:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b06:	2200      	movs	r2, #0
 8001b08:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	69b8      	ldr	r0, [r7, #24]
 8001b18:	f001 f93e 	bl	8002d98 <pxPortInitialiseStack>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b2e:	bf00      	nop
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001b40:	f001 fa5a 	bl	8002ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001b44:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <prvAddNewTaskToReadyList+0xc4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	4a2c      	ldr	r2, [pc, #176]	@ (8001bfc <prvAddNewTaskToReadyList+0xc4>)
 8001b4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c00 <prvAddNewTaskToReadyList+0xc8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001b56:	4a2a      	ldr	r2, [pc, #168]	@ (8001c00 <prvAddNewTaskToReadyList+0xc8>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b5c:	4b27      	ldr	r3, [pc, #156]	@ (8001bfc <prvAddNewTaskToReadyList+0xc4>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d110      	bne.n	8001b86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001b64:	f000 fc1e 	bl	80023a4 <prvInitialiseTaskLists>
 8001b68:	e00d      	b.n	8001b86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001b6a:	4b26      	ldr	r3, [pc, #152]	@ (8001c04 <prvAddNewTaskToReadyList+0xcc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b72:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <prvAddNewTaskToReadyList+0xc8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d802      	bhi.n	8001b86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001b80:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <prvAddNewTaskToReadyList+0xc8>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <prvAddNewTaskToReadyList+0xd0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001c08 <prvAddNewTaskToReadyList+0xd0>)
 8001b8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <prvAddNewTaskToReadyList+0xd0>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <prvAddNewTaskToReadyList+0xd4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d903      	bls.n	8001bac <prvAddNewTaskToReadyList+0x74>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba8:	4a18      	ldr	r2, [pc, #96]	@ (8001c0c <prvAddNewTaskToReadyList+0xd4>)
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4a15      	ldr	r2, [pc, #84]	@ (8001c10 <prvAddNewTaskToReadyList+0xd8>)
 8001bba:	441a      	add	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f7ff f901 	bl	8000dca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001bc8:	f001 fa48 	bl	800305c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <prvAddNewTaskToReadyList+0xcc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <prvAddNewTaskToReadyList+0xc8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d207      	bcs.n	8001bf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001be2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <prvAddNewTaskToReadyList+0xdc>)
 8001be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	f3bf 8f4f 	dsb	sy
 8001bee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000c0c 	.word	0x20000c0c
 8001c00:	20000738 	.word	0x20000738
 8001c04:	20000c18 	.word	0x20000c18
 8001c08:	20000c28 	.word	0x20000c28
 8001c0c:	20000c14 	.word	0x20000c14
 8001c10:	2000073c 	.word	0x2000073c
 8001c14:	e000ed04 	.word	0xe000ed04

08001c18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d018      	beq.n	8001c5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001c2a:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <vTaskDelay+0x64>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <vTaskDelay+0x32>
	__asm volatile
 8001c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	60bb      	str	r3, [r7, #8]
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	e7fd      	b.n	8001c46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001c4a:	f000 f883 	bl	8001d54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fcf3 	bl	800263c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001c56:	f000 f88b 	bl	8001d70 <xTaskResumeAll>
 8001c5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d107      	bne.n	8001c72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <vTaskDelay+0x68>)
 8001c64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f3bf 8f4f 	dsb	sy
 8001c6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000c34 	.word	0x20000c34
 8001c80:	e000ed04 	.word	0xe000ed04

08001c84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001c92:	463a      	mov	r2, r7
 8001c94:	1d39      	adds	r1, r7, #4
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f834 	bl	8000d08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	9202      	str	r2, [sp, #8]
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	460a      	mov	r2, r1
 8001cb2:	4922      	ldr	r1, [pc, #136]	@ (8001d3c <vTaskStartScheduler+0xb8>)
 8001cb4:	4822      	ldr	r0, [pc, #136]	@ (8001d40 <vTaskStartScheduler+0xbc>)
 8001cb6:	f7ff fe09 	bl	80018cc <xTaskCreateStatic>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a21      	ldr	r2, [pc, #132]	@ (8001d44 <vTaskStartScheduler+0xc0>)
 8001cbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001cc0:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <vTaskStartScheduler+0xc0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e001      	b.n	8001cd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d102      	bne.n	8001cde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001cd8:	f000 fd04 	bl	80026e4 <xTimerCreateTimerTask>
 8001cdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d116      	bne.n	8001d12 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ce8:	f383 8811 	msr	BASEPRI, r3
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	613b      	str	r3, [r7, #16]
}
 8001cf6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <vTaskStartScheduler+0xc4>)
 8001cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <vTaskStartScheduler+0xc8>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <vTaskStartScheduler+0xcc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001d0c:	f001 f8d0 	bl	8002eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001d10:	e00f      	b.n	8001d32 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d18:	d10b      	bne.n	8001d32 <vTaskStartScheduler+0xae>
	__asm volatile
 8001d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	60fb      	str	r3, [r7, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	e7fd      	b.n	8001d2e <vTaskStartScheduler+0xaa>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	080036c8 	.word	0x080036c8
 8001d40:	08002375 	.word	0x08002375
 8001d44:	20000c30 	.word	0x20000c30
 8001d48:	20000c2c 	.word	0x20000c2c
 8001d4c:	20000c18 	.word	0x20000c18
 8001d50:	20000c10 	.word	0x20000c10

08001d54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <vTaskSuspendAll+0x18>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	4a03      	ldr	r2, [pc, #12]	@ (8001d6c <vTaskSuspendAll+0x18>)
 8001d60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	20000c34 	.word	0x20000c34

08001d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d7e:	4b42      	ldr	r3, [pc, #264]	@ (8001e88 <xTaskResumeAll+0x118>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10b      	bne.n	8001d9e <xTaskResumeAll+0x2e>
	__asm volatile
 8001d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8a:	f383 8811 	msr	BASEPRI, r3
 8001d8e:	f3bf 8f6f 	isb	sy
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	603b      	str	r3, [r7, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	e7fd      	b.n	8001d9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d9e:	f001 f92b 	bl	8002ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001da2:	4b39      	ldr	r3, [pc, #228]	@ (8001e88 <xTaskResumeAll+0x118>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	4a37      	ldr	r2, [pc, #220]	@ (8001e88 <xTaskResumeAll+0x118>)
 8001daa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dac:	4b36      	ldr	r3, [pc, #216]	@ (8001e88 <xTaskResumeAll+0x118>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d162      	bne.n	8001e7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001db4:	4b35      	ldr	r3, [pc, #212]	@ (8001e8c <xTaskResumeAll+0x11c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d05e      	beq.n	8001e7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001dbc:	e02f      	b.n	8001e1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dbe:	4b34      	ldr	r3, [pc, #208]	@ (8001e90 <xTaskResumeAll+0x120>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3318      	adds	r3, #24
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f85a 	bl	8000e84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f855 	bl	8000e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dde:	4b2d      	ldr	r3, [pc, #180]	@ (8001e94 <xTaskResumeAll+0x124>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d903      	bls.n	8001dee <xTaskResumeAll+0x7e>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	4a2a      	ldr	r2, [pc, #168]	@ (8001e94 <xTaskResumeAll+0x124>)
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4a27      	ldr	r2, [pc, #156]	@ (8001e98 <xTaskResumeAll+0x128>)
 8001dfc:	441a      	add	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3304      	adds	r3, #4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4610      	mov	r0, r2
 8001e06:	f7fe ffe0 	bl	8000dca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e0e:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <xTaskResumeAll+0x12c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d302      	bcc.n	8001e1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8001e18:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <xTaskResumeAll+0x130>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <xTaskResumeAll+0x120>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1cb      	bne.n	8001dbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001e2c:	f000 fb58 	bl	80024e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <xTaskResumeAll+0x134>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001e3c:	f000 f846 	bl	8001ecc <xTaskIncrementTick>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8001e46:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <xTaskResumeAll+0x130>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f1      	bne.n	8001e3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8001e58:	4b12      	ldr	r3, [pc, #72]	@ (8001ea4 <xTaskResumeAll+0x134>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <xTaskResumeAll+0x130>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e66:	2301      	movs	r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <xTaskResumeAll+0x138>)
 8001e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e7a:	f001 f8ef 	bl	800305c <vPortExitCritical>

	return xAlreadyYielded;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000c34 	.word	0x20000c34
 8001e8c:	20000c0c 	.word	0x20000c0c
 8001e90:	20000bcc 	.word	0x20000bcc
 8001e94:	20000c14 	.word	0x20000c14
 8001e98:	2000073c 	.word	0x2000073c
 8001e9c:	20000738 	.word	0x20000738
 8001ea0:	20000c20 	.word	0x20000c20
 8001ea4:	20000c1c 	.word	0x20000c1c
 8001ea8:	e000ed04 	.word	0xe000ed04

08001eac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001eb2:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <xTaskGetTickCount+0x1c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001eb8:	687b      	ldr	r3, [r7, #4]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000c10 	.word	0x20000c10

08001ecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8002014 <xTaskIncrementTick+0x148>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 8090 	bne.w	8002000 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <xTaskIncrementTick+0x14c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8002018 <xTaskIncrementTick+0x14c>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d121      	bne.n	8001f38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ef4:	4b49      	ldr	r3, [pc, #292]	@ (800201c <xTaskIncrementTick+0x150>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8001efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f02:	f383 8811 	msr	BASEPRI, r3
 8001f06:	f3bf 8f6f 	isb	sy
 8001f0a:	f3bf 8f4f 	dsb	sy
 8001f0e:	603b      	str	r3, [r7, #0]
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	e7fd      	b.n	8001f12 <xTaskIncrementTick+0x46>
 8001f16:	4b41      	ldr	r3, [pc, #260]	@ (800201c <xTaskIncrementTick+0x150>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	4b40      	ldr	r3, [pc, #256]	@ (8002020 <xTaskIncrementTick+0x154>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a3e      	ldr	r2, [pc, #248]	@ (800201c <xTaskIncrementTick+0x150>)
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4a3e      	ldr	r2, [pc, #248]	@ (8002020 <xTaskIncrementTick+0x154>)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002024 <xTaskIncrementTick+0x158>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	4a3c      	ldr	r2, [pc, #240]	@ (8002024 <xTaskIncrementTick+0x158>)
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	f000 fad4 	bl	80024e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <xTaskIncrementTick+0x15c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d349      	bcc.n	8001fd6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f42:	4b36      	ldr	r3, [pc, #216]	@ (800201c <xTaskIncrementTick+0x150>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f4c:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <xTaskIncrementTick+0x15c>)
 8001f4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f52:	601a      	str	r2, [r3, #0]
					break;
 8001f54:	e03f      	b.n	8001fd6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f56:	4b31      	ldr	r3, [pc, #196]	@ (800201c <xTaskIncrementTick+0x150>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d203      	bcs.n	8001f76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002028 <xTaskIncrementTick+0x15c>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001f74:	e02f      	b.n	8001fd6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe ff82 	bl	8000e84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	3318      	adds	r3, #24
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe ff79 	bl	8000e84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f96:	4b25      	ldr	r3, [pc, #148]	@ (800202c <xTaskIncrementTick+0x160>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d903      	bls.n	8001fa6 <xTaskIncrementTick+0xda>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa2:	4a22      	ldr	r2, [pc, #136]	@ (800202c <xTaskIncrementTick+0x160>)
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002030 <xTaskIncrementTick+0x164>)
 8001fb4:	441a      	add	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	f7fe ff04 	bl	8000dca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <xTaskIncrementTick+0x168>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d3b8      	bcc.n	8001f42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fd4:	e7b5      	b.n	8001f42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001fd6:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <xTaskIncrementTick+0x168>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fdc:	4914      	ldr	r1, [pc, #80]	@ (8002030 <xTaskIncrementTick+0x164>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d901      	bls.n	8001ff2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <xTaskIncrementTick+0x16c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e004      	b.n	800200a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002000:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <xTaskIncrementTick+0x170>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a0d      	ldr	r2, [pc, #52]	@ (800203c <xTaskIncrementTick+0x170>)
 8002008:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800200a:	697b      	ldr	r3, [r7, #20]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000c34 	.word	0x20000c34
 8002018:	20000c10 	.word	0x20000c10
 800201c:	20000bc4 	.word	0x20000bc4
 8002020:	20000bc8 	.word	0x20000bc8
 8002024:	20000c24 	.word	0x20000c24
 8002028:	20000c2c 	.word	0x20000c2c
 800202c:	20000c14 	.word	0x20000c14
 8002030:	2000073c 	.word	0x2000073c
 8002034:	20000738 	.word	0x20000738
 8002038:	20000c20 	.word	0x20000c20
 800203c:	20000c1c 	.word	0x20000c1c

08002040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002046:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <vTaskSwitchContext+0xa8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800204e:	4b27      	ldr	r3, [pc, #156]	@ (80020ec <vTaskSwitchContext+0xac>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002054:	e042      	b.n	80020dc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002056:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <vTaskSwitchContext+0xac>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800205c:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <vTaskSwitchContext+0xb0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e011      	b.n	8002088 <vTaskSwitchContext+0x48>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10b      	bne.n	8002082 <vTaskSwitchContext+0x42>
	__asm volatile
 800206a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206e:	f383 8811 	msr	BASEPRI, r3
 8002072:	f3bf 8f6f 	isb	sy
 8002076:	f3bf 8f4f 	dsb	sy
 800207a:	607b      	str	r3, [r7, #4]
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	e7fd      	b.n	800207e <vTaskSwitchContext+0x3e>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3b01      	subs	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	491a      	ldr	r1, [pc, #104]	@ (80020f4 <vTaskSwitchContext+0xb4>)
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0e3      	beq.n	8002064 <vTaskSwitchContext+0x24>
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4a13      	ldr	r2, [pc, #76]	@ (80020f4 <vTaskSwitchContext+0xb4>)
 80020a8:	4413      	add	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3308      	adds	r3, #8
 80020be:	429a      	cmp	r2, r3
 80020c0:	d104      	bne.n	80020cc <vTaskSwitchContext+0x8c>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4a09      	ldr	r2, [pc, #36]	@ (80020f8 <vTaskSwitchContext+0xb8>)
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4a06      	ldr	r2, [pc, #24]	@ (80020f0 <vTaskSwitchContext+0xb0>)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	20000c34 	.word	0x20000c34
 80020ec:	20000c20 	.word	0x20000c20
 80020f0:	20000c14 	.word	0x20000c14
 80020f4:	2000073c 	.word	0x2000073c
 80020f8:	20000738 	.word	0x20000738

080020fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10b      	bne.n	8002124 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800210c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002110:	f383 8811 	msr	BASEPRI, r3
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	60fb      	str	r3, [r7, #12]
}
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002124:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <vTaskPlaceOnEventList+0x48>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3318      	adds	r3, #24
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe fe70 	bl	8000e12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002132:	2101      	movs	r1, #1
 8002134:	6838      	ldr	r0, [r7, #0]
 8002136:	f000 fa81 	bl	800263c <prvAddCurrentTaskToDelayedList>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000738 	.word	0x20000738

08002148 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10b      	bne.n	8002172 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	617b      	str	r3, [r7, #20]
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	e7fd      	b.n	800216e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002172:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <vTaskPlaceOnEventListRestricted+0x54>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	3318      	adds	r3, #24
 8002178:	4619      	mov	r1, r3
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7fe fe25 	bl	8000dca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800218a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68b8      	ldr	r0, [r7, #8]
 8002190:	f000 fa54 	bl	800263c <prvAddCurrentTaskToDelayedList>
	}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000738 	.word	0x20000738

080021a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10b      	bne.n	80021ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80021b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ba:	f383 8811 	msr	BASEPRI, r3
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	60fb      	str	r3, [r7, #12]
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	e7fd      	b.n	80021ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	3318      	adds	r3, #24
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fe56 	bl	8000e84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <xTaskRemoveFromEventList+0xb0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d11d      	bne.n	800221c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	3304      	adds	r3, #4
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fe4d 	bl	8000e84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ee:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <xTaskRemoveFromEventList+0xb4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d903      	bls.n	80021fe <xTaskRemoveFromEventList+0x5e>
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	4a16      	ldr	r2, [pc, #88]	@ (8002254 <xTaskRemoveFromEventList+0xb4>)
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4a13      	ldr	r2, [pc, #76]	@ (8002258 <xTaskRemoveFromEventList+0xb8>)
 800220c:	441a      	add	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	3304      	adds	r3, #4
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f7fe fdd8 	bl	8000dca <vListInsertEnd>
 800221a:	e005      	b.n	8002228 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	3318      	adds	r3, #24
 8002220:	4619      	mov	r1, r3
 8002222:	480e      	ldr	r0, [pc, #56]	@ (800225c <xTaskRemoveFromEventList+0xbc>)
 8002224:	f7fe fdd1 	bl	8000dca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <xTaskRemoveFromEventList+0xc0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	429a      	cmp	r2, r3
 8002234:	d905      	bls.n	8002242 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002236:	2301      	movs	r3, #1
 8002238:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <xTaskRemoveFromEventList+0xc4>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e001      	b.n	8002246 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002246:	697b      	ldr	r3, [r7, #20]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000c34 	.word	0x20000c34
 8002254:	20000c14 	.word	0x20000c14
 8002258:	2000073c 	.word	0x2000073c
 800225c:	20000bcc 	.word	0x20000bcc
 8002260:	20000738 	.word	0x20000738
 8002264:	20000c20 	.word	0x20000c20

08002268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <vTaskInternalSetTimeOutState+0x24>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <vTaskInternalSetTimeOutState+0x28>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	605a      	str	r2, [r3, #4]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20000c24 	.word	0x20000c24
 8002290:	20000c10 	.word	0x20000c10

08002294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10b      	bne.n	80022bc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80022a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	613b      	str	r3, [r7, #16]
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10b      	bne.n	80022da <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80022c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c6:	f383 8811 	msr	BASEPRI, r3
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	60fb      	str	r3, [r7, #12]
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	e7fd      	b.n	80022d6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80022da:	f000 fe8d 	bl	8002ff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80022de:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <xTaskCheckForTimeOut+0xc0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022f6:	d102      	bne.n	80022fe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	e023      	b.n	8002346 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <xTaskCheckForTimeOut+0xc4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d007      	beq.n	800231a <xTaskCheckForTimeOut+0x86>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	429a      	cmp	r2, r3
 8002312:	d302      	bcc.n	800231a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002314:	2301      	movs	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e015      	b.n	8002346 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	d20b      	bcs.n	800233c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	1ad2      	subs	r2, r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff99 	bl	8002268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e004      	b.n	8002346 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002342:	2301      	movs	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002346:	f000 fe89 	bl	800305c <vPortExitCritical>

	return xReturn;
 800234a:	69fb      	ldr	r3, [r7, #28]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000c10 	.word	0x20000c10
 8002358:	20000c24 	.word	0x20000c24

0800235c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <vTaskMissedYield+0x14>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	20000c20 	.word	0x20000c20

08002374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800237c:	f000 f852 	bl	8002424 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <prvIdleTask+0x28>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d9f9      	bls.n	800237c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <prvIdleTask+0x2c>)
 800238a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002398:	e7f0      	b.n	800237c <prvIdleTask+0x8>
 800239a:	bf00      	nop
 800239c:	2000073c 	.word	0x2000073c
 80023a0:	e000ed04 	.word	0xe000ed04

080023a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	e00c      	b.n	80023ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <prvInitialiseTaskLists+0x60>)
 80023bc:	4413      	add	r3, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fcd6 	bl	8000d70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3301      	adds	r3, #1
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b37      	cmp	r3, #55	@ 0x37
 80023ce:	d9ef      	bls.n	80023b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80023d0:	480d      	ldr	r0, [pc, #52]	@ (8002408 <prvInitialiseTaskLists+0x64>)
 80023d2:	f7fe fccd 	bl	8000d70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023d6:	480d      	ldr	r0, [pc, #52]	@ (800240c <prvInitialiseTaskLists+0x68>)
 80023d8:	f7fe fcca 	bl	8000d70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023dc:	480c      	ldr	r0, [pc, #48]	@ (8002410 <prvInitialiseTaskLists+0x6c>)
 80023de:	f7fe fcc7 	bl	8000d70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80023e2:	480c      	ldr	r0, [pc, #48]	@ (8002414 <prvInitialiseTaskLists+0x70>)
 80023e4:	f7fe fcc4 	bl	8000d70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80023e8:	480b      	ldr	r0, [pc, #44]	@ (8002418 <prvInitialiseTaskLists+0x74>)
 80023ea:	f7fe fcc1 	bl	8000d70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <prvInitialiseTaskLists+0x78>)
 80023f0:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <prvInitialiseTaskLists+0x64>)
 80023f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <prvInitialiseTaskLists+0x7c>)
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <prvInitialiseTaskLists+0x68>)
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000073c 	.word	0x2000073c
 8002408:	20000b9c 	.word	0x20000b9c
 800240c:	20000bb0 	.word	0x20000bb0
 8002410:	20000bcc 	.word	0x20000bcc
 8002414:	20000be0 	.word	0x20000be0
 8002418:	20000bf8 	.word	0x20000bf8
 800241c:	20000bc4 	.word	0x20000bc4
 8002420:	20000bc8 	.word	0x20000bc8

08002424 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800242a:	e019      	b.n	8002460 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800242c:	f000 fde4 	bl	8002ff8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002430:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <prvCheckTasksWaitingTermination+0x50>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3304      	adds	r3, #4
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe fd21 	bl	8000e84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002442:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <prvCheckTasksWaitingTermination+0x54>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3b01      	subs	r3, #1
 8002448:	4a0b      	ldr	r2, [pc, #44]	@ (8002478 <prvCheckTasksWaitingTermination+0x54>)
 800244a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <prvCheckTasksWaitingTermination+0x58>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <prvCheckTasksWaitingTermination+0x58>)
 8002454:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002456:	f000 fe01 	bl	800305c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f810 	bl	8002480 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <prvCheckTasksWaitingTermination+0x58>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e1      	bne.n	800242c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000be0 	.word	0x20000be0
 8002478:	20000c0c 	.word	0x20000c0c
 800247c:	20000bf4 	.word	0x20000bf4

08002480 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800248e:	2b00      	cmp	r3, #0
 8002490:	d108      	bne.n	80024a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4618      	mov	r0, r3
 8002498:	f000 ff9e 	bl	80033d8 <vPortFree>
				vPortFree( pxTCB );
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 ff9b 	bl	80033d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80024a2:	e019      	b.n	80024d8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d103      	bne.n	80024b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 ff92 	bl	80033d8 <vPortFree>
	}
 80024b4:	e010      	b.n	80024d8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d00b      	beq.n	80024d8 <prvDeleteTCB+0x58>
	__asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	60fb      	str	r3, [r7, #12]
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <prvDeleteTCB+0x54>
	}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <prvResetNextTaskUnblockTime+0x38>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d104      	bne.n	80024fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <prvResetNextTaskUnblockTime+0x3c>)
 80024f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80024f8:	e008      	b.n	800250c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <prvResetNextTaskUnblockTime+0x38>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <prvResetNextTaskUnblockTime+0x3c>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	20000bc4 	.word	0x20000bc4
 800251c:	20000c2c 	.word	0x20000c2c

08002520 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002526:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <xTaskGetSchedulerState+0x34>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800252e:	2301      	movs	r3, #1
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	e008      	b.n	8002546 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002534:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <xTaskGetSchedulerState+0x38>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800253c:	2302      	movs	r3, #2
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	e001      	b.n	8002546 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002546:	687b      	ldr	r3, [r7, #4]
	}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	20000c18 	.word	0x20000c18
 8002558:	20000c34 	.word	0x20000c34

0800255c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d058      	beq.n	8002624 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002572:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <xTaskPriorityDisinherit+0xd4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	429a      	cmp	r2, r3
 800257a:	d00b      	beq.n	8002594 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	60fb      	str	r3, [r7, #12]
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	60bb      	str	r3, [r7, #8]
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d02c      	beq.n	8002624 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d128      	bne.n	8002624 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	3304      	adds	r3, #4
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fc54 	bl	8000e84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <xTaskPriorityDisinherit+0xd8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d903      	bls.n	8002604 <xTaskPriorityDisinherit+0xa8>
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	4a0c      	ldr	r2, [pc, #48]	@ (8002634 <xTaskPriorityDisinherit+0xd8>)
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <xTaskPriorityDisinherit+0xdc>)
 8002612:	441a      	add	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f7fe fbd5 	bl	8000dca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002620:	2301      	movs	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002624:	697b      	ldr	r3, [r7, #20]
	}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000738 	.word	0x20000738
 8002634:	20000c14 	.word	0x20000c14
 8002638:	2000073c 	.word	0x2000073c

0800263c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002646:	4b21      	ldr	r3, [pc, #132]	@ (80026cc <prvAddCurrentTaskToDelayedList+0x90>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800264c:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3304      	adds	r3, #4
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fc16 	bl	8000e84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800265e:	d10a      	bne.n	8002676 <prvAddCurrentTaskToDelayedList+0x3a>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002666:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3304      	adds	r3, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4819      	ldr	r0, [pc, #100]	@ (80026d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8002670:	f7fe fbab 	bl	8000dca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002674:	e026      	b.n	80026c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800267e:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	429a      	cmp	r2, r3
 800268c:	d209      	bcs.n	80026a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800268e:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3304      	adds	r3, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f7fe fbb9 	bl	8000e12 <vListInsert>
}
 80026a0:	e010      	b.n	80026c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026a2:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3304      	adds	r3, #4
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f7fe fbaf 	bl	8000e12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80026b4:	4b0a      	ldr	r3, [pc, #40]	@ (80026e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d202      	bcs.n	80026c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80026be:	4a08      	ldr	r2, [pc, #32]	@ (80026e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	6013      	str	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000c10 	.word	0x20000c10
 80026d0:	20000738 	.word	0x20000738
 80026d4:	20000bf8 	.word	0x20000bf8
 80026d8:	20000bc8 	.word	0x20000bc8
 80026dc:	20000bc4 	.word	0x20000bc4
 80026e0:	20000c2c 	.word	0x20000c2c

080026e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80026ee:	f000 fb13 	bl	8002d18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80026f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <xTimerCreateTimerTask+0x84>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d021      	beq.n	800273e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002702:	1d3a      	adds	r2, r7, #4
 8002704:	f107 0108 	add.w	r1, r7, #8
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fb15 	bl	8000d3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	9202      	str	r2, [sp, #8]
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2302      	movs	r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2300      	movs	r3, #0
 8002722:	460a      	mov	r2, r1
 8002724:	4911      	ldr	r1, [pc, #68]	@ (800276c <xTimerCreateTimerTask+0x88>)
 8002726:	4812      	ldr	r0, [pc, #72]	@ (8002770 <xTimerCreateTimerTask+0x8c>)
 8002728:	f7ff f8d0 	bl	80018cc <xTaskCreateStatic>
 800272c:	4603      	mov	r3, r0
 800272e:	4a11      	ldr	r2, [pc, #68]	@ (8002774 <xTimerCreateTimerTask+0x90>)
 8002730:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <xTimerCreateTimerTask+0x90>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800273a:	2301      	movs	r3, #1
 800273c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	613b      	str	r3, [r7, #16]
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800275c:	697b      	ldr	r3, [r7, #20]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000c68 	.word	0x20000c68
 800276c:	080036d0 	.word	0x080036d0
 8002770:	080028b1 	.word	0x080028b1
 8002774:	20000c6c 	.word	0x20000c6c

08002778 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	@ 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	623b      	str	r3, [r7, #32]
}
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80027a8:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <xTimerGenericCommand+0x98>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02a      	beq.n	8002806 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b05      	cmp	r3, #5
 80027c0:	dc18      	bgt.n	80027f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80027c2:	f7ff fead 	bl	8002520 <xTaskGetSchedulerState>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d109      	bne.n	80027e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80027cc:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <xTimerGenericCommand+0x98>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	f107 0110 	add.w	r1, r7, #16
 80027d4:	2300      	movs	r3, #0
 80027d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027d8:	f7fe fc88 	bl	80010ec <xQueueGenericSend>
 80027dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80027de:	e012      	b.n	8002806 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <xTimerGenericCommand+0x98>)
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	f107 0110 	add.w	r1, r7, #16
 80027e8:	2300      	movs	r3, #0
 80027ea:	2200      	movs	r2, #0
 80027ec:	f7fe fc7e 	bl	80010ec <xQueueGenericSend>
 80027f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80027f2:	e008      	b.n	8002806 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <xTimerGenericCommand+0x98>)
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	f107 0110 	add.w	r1, r7, #16
 80027fc:	2300      	movs	r3, #0
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	f7fe fd76 	bl	80012f0 <xQueueGenericSendFromISR>
 8002804:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002808:	4618      	mov	r0, r3
 800280a:	3728      	adds	r7, #40	@ 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000c68 	.word	0x20000c68

08002814 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af02      	add	r7, sp, #8
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800281e:	4b23      	ldr	r3, [pc, #140]	@ (80028ac <prvProcessExpiredTimer+0x98>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3304      	adds	r3, #4
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fb29 	bl	8000e84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d023      	beq.n	8002888 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	699a      	ldr	r2, [r3, #24]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	18d1      	adds	r1, r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	6978      	ldr	r0, [r7, #20]
 800284e:	f000 f8d5 	bl	80029fc <prvInsertTimerInActiveList>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002858:	2300      	movs	r3, #0
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2300      	movs	r3, #0
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	2100      	movs	r1, #0
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff88 	bl	8002778 <xTimerGenericCommand>
 8002868:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d114      	bne.n	800289a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	60fb      	str	r3, [r7, #12]
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	4798      	blx	r3
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000c60 	.word	0x20000c60

080028b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80028b8:	f107 0308 	add.w	r3, r7, #8
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f859 	bl	8002974 <prvGetNextExpireTime>
 80028c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4619      	mov	r1, r3
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f805 	bl	80028d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80028ce:	f000 f8d7 	bl	8002a80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80028d2:	bf00      	nop
 80028d4:	e7f0      	b.n	80028b8 <prvTimerTask+0x8>
	...

080028d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80028e2:	f7ff fa37 	bl	8001d54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f866 	bl	80029bc <prvSampleTimeNow>
 80028f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d130      	bne.n	800295a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <prvProcessTimerOrBlockTask+0x3c>
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	429a      	cmp	r2, r3
 8002904:	d806      	bhi.n	8002914 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002906:	f7ff fa33 	bl	8001d70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800290a:	68f9      	ldr	r1, [r7, #12]
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff81 	bl	8002814 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002912:	e024      	b.n	800295e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800291a:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <prvProcessTimerOrBlockTask+0x90>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <prvProcessTimerOrBlockTask+0x50>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <prvProcessTimerOrBlockTask+0x52>
 8002928:	2300      	movs	r3, #0
 800292a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800292c:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <prvProcessTimerOrBlockTask+0x94>)
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe ff93 	bl	8001864 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800293e:	f7ff fa17 	bl	8001d70 <xTaskResumeAll>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <prvProcessTimerOrBlockTask+0x98>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
}
 8002958:	e001      	b.n	800295e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800295a:	f7ff fa09 	bl	8001d70 <xTaskResumeAll>
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000c64 	.word	0x20000c64
 800296c:	20000c68 	.word	0x20000c68
 8002970:	e000ed04 	.word	0xe000ed04

08002974 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800297c:	4b0e      	ldr	r3, [pc, #56]	@ (80029b8 <prvGetNextExpireTime+0x44>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <prvGetNextExpireTime+0x16>
 8002986:	2201      	movs	r2, #1
 8002988:	e000      	b.n	800298c <prvGetNextExpireTime+0x18>
 800298a:	2200      	movs	r2, #0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002998:	4b07      	ldr	r3, [pc, #28]	@ (80029b8 <prvGetNextExpireTime+0x44>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e001      	b.n	80029a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80029a8:	68fb      	ldr	r3, [r7, #12]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000c60 	.word	0x20000c60

080029bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80029c4:	f7ff fa72 	bl	8001eac <xTaskGetTickCount>
 80029c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80029ca:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <prvSampleTimeNow+0x3c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d205      	bcs.n	80029e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80029d4:	f000 f93a 	bl	8002c4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e002      	b.n	80029e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80029e6:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <prvSampleTimeNow+0x3c>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80029ec:	68fb      	ldr	r3, [r7, #12]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000c70 	.word	0x20000c70

080029fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d812      	bhi.n	8002a48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002a30:	2301      	movs	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e01b      	b.n	8002a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <prvInsertTimerInActiveList+0x7c>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4610      	mov	r0, r2
 8002a42:	f7fe f9e6 	bl	8000e12 <vListInsert>
 8002a46:	e012      	b.n	8002a6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d206      	bcs.n	8002a5e <prvInsertTimerInActiveList+0x62>
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	e007      	b.n	8002a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a5e:	4b07      	ldr	r3, [pc, #28]	@ (8002a7c <prvInsertTimerInActiveList+0x80>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3304      	adds	r3, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f7fe f9d2 	bl	8000e12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002a6e:	697b      	ldr	r3, [r7, #20]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000c64 	.word	0x20000c64
 8002a7c:	20000c60 	.word	0x20000c60

08002a80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	@ 0x38
 8002a84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a86:	e0ce      	b.n	8002c26 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	da19      	bge.n	8002ac2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	3304      	adds	r3, #4
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	61fb      	str	r3, [r7, #28]
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	e7fd      	b.n	8002aae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab8:	6850      	ldr	r0, [r2, #4]
 8002aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002abc:	6892      	ldr	r2, [r2, #8]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f2c0 80ae 	blt.w	8002c26 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad8:	3304      	adds	r3, #4
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe f9d2 	bl	8000e84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff6a 	bl	80029bc <prvSampleTimeNow>
 8002ae8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b09      	cmp	r3, #9
 8002aee:	f200 8097 	bhi.w	8002c20 <prvProcessReceivedCommands+0x1a0>
 8002af2:	a201      	add	r2, pc, #4	@ (adr r2, 8002af8 <prvProcessReceivedCommands+0x78>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b21 	.word	0x08002b21
 8002afc:	08002b21 	.word	0x08002b21
 8002b00:	08002b21 	.word	0x08002b21
 8002b04:	08002b97 	.word	0x08002b97
 8002b08:	08002bab 	.word	0x08002bab
 8002b0c:	08002bf7 	.word	0x08002bf7
 8002b10:	08002b21 	.word	0x08002b21
 8002b14:	08002b21 	.word	0x08002b21
 8002b18:	08002b97 	.word	0x08002b97
 8002b1c:	08002bab 	.word	0x08002bab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	18d1      	adds	r1, r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b40:	f7ff ff5c 	bl	80029fc <prvInsertTimerInActiveList>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d06c      	beq.n	8002c24 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d061      	beq.n	8002c24 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	441a      	add	r2, r3
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b72:	f7ff fe01 	bl	8002778 <xTimerGenericCommand>
 8002b76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d152      	bne.n	8002c24 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	61bb      	str	r3, [r7, #24]
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	e7fd      	b.n	8002b92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b9c:	f023 0301 	bic.w	r3, r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8002ba8:	e03d      	b.n	8002c26 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10b      	bne.n	8002be2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	617b      	str	r3, [r7, #20]
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	e7fd      	b.n	8002bde <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	18d1      	adds	r1, r2, r3
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bf0:	f7ff ff04 	bl	80029fc <prvInsertTimerInActiveList>
					break;
 8002bf4:	e017      	b.n	8002c26 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d103      	bne.n	8002c0c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8002c04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c06:	f000 fbe7 	bl	80033d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002c0a:	e00c      	b.n	8002c26 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8002c1e:	e002      	b.n	8002c26 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8002c20:	bf00      	nop
 8002c22:	e000      	b.n	8002c26 <prvProcessReceivedCommands+0x1a6>
					break;
 8002c24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c26:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <prvProcessReceivedCommands+0x1c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1d39      	adds	r1, r7, #4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fbfc 	bl	800142c <xQueueReceive>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f47f af26 	bne.w	8002a88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3730      	adds	r7, #48	@ 0x30
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000c68 	.word	0x20000c68

08002c4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c52:	e049      	b.n	8002ce8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c54:	4b2e      	ldr	r3, [pc, #184]	@ (8002d10 <prvSwitchTimerLists+0xc4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d10 <prvSwitchTimerLists+0xc4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe f909 	bl	8000e84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d02f      	beq.n	8002ce8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d90e      	bls.n	8002cb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <prvSwitchTimerLists+0xc4>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7fe f8ae 	bl	8000e12 <vListInsert>
 8002cb6:	e017      	b.n	8002ce8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f7ff fd58 	bl	8002778 <xTimerGenericCommand>
 8002cc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	603b      	str	r3, [r7, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ce8:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <prvSwitchTimerLists+0xc4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1b0      	bne.n	8002c54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <prvSwitchTimerLists+0xc4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <prvSwitchTimerLists+0xc8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <prvSwitchTimerLists+0xc4>)
 8002cfe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002d00:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <prvSwitchTimerLists+0xc8>)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000c60 	.word	0x20000c60
 8002d14:	20000c64 	.word	0x20000c64

08002d18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002d1e:	f000 f96b 	bl	8002ff8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002d22:	4b15      	ldr	r3, [pc, #84]	@ (8002d78 <prvCheckForValidListAndQueue+0x60>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d120      	bne.n	8002d6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002d2a:	4814      	ldr	r0, [pc, #80]	@ (8002d7c <prvCheckForValidListAndQueue+0x64>)
 8002d2c:	f7fe f820 	bl	8000d70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002d30:	4813      	ldr	r0, [pc, #76]	@ (8002d80 <prvCheckForValidListAndQueue+0x68>)
 8002d32:	f7fe f81d 	bl	8000d70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <prvCheckForValidListAndQueue+0x6c>)
 8002d38:	4a10      	ldr	r2, [pc, #64]	@ (8002d7c <prvCheckForValidListAndQueue+0x64>)
 8002d3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002d3c:	4b12      	ldr	r3, [pc, #72]	@ (8002d88 <prvCheckForValidListAndQueue+0x70>)
 8002d3e:	4a10      	ldr	r2, [pc, #64]	@ (8002d80 <prvCheckForValidListAndQueue+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002d42:	2300      	movs	r3, #0
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <prvCheckForValidListAndQueue+0x74>)
 8002d48:	4a11      	ldr	r2, [pc, #68]	@ (8002d90 <prvCheckForValidListAndQueue+0x78>)
 8002d4a:	2110      	movs	r1, #16
 8002d4c:	200a      	movs	r0, #10
 8002d4e:	f7fe f92d 	bl	8000fac <xQueueGenericCreateStatic>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <prvCheckForValidListAndQueue+0x60>)
 8002d56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002d58:	4b07      	ldr	r3, [pc, #28]	@ (8002d78 <prvCheckForValidListAndQueue+0x60>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <prvCheckForValidListAndQueue+0x60>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	490b      	ldr	r1, [pc, #44]	@ (8002d94 <prvCheckForValidListAndQueue+0x7c>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fd52 	bl	8001810 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d6c:	f000 f976 	bl	800305c <vPortExitCritical>
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000c68 	.word	0x20000c68
 8002d7c:	20000c38 	.word	0x20000c38
 8002d80:	20000c4c 	.word	0x20000c4c
 8002d84:	20000c60 	.word	0x20000c60
 8002d88:	20000c64 	.word	0x20000c64
 8002d8c:	20000d14 	.word	0x20000d14
 8002d90:	20000c74 	.word	0x20000c74
 8002d94:	080036d8 	.word	0x080036d8

08002d98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3b04      	subs	r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3b04      	subs	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f023 0201 	bic.w	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3b04      	subs	r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dfc <pxPortInitialiseStack+0x64>)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3b14      	subs	r3, #20
 8002dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3b04      	subs	r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f06f 0202 	mvn.w	r2, #2
 8002de6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3b20      	subs	r3, #32
 8002dec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	08002e01 	.word	0x08002e01

08002e00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e0a:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <prvTaskExitError+0x58>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e12:	d00b      	beq.n	8002e2c <prvTaskExitError+0x2c>
	__asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	60fb      	str	r3, [r7, #12]
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <prvTaskExitError+0x28>
	__asm volatile
 8002e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e30:	f383 8811 	msr	BASEPRI, r3
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	60bb      	str	r3, [r7, #8]
}
 8002e3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e40:	bf00      	nop
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0fc      	beq.n	8002e42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000010 	.word	0x20000010
 8002e5c:	00000000 	.word	0x00000000

08002e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e60:	4b07      	ldr	r3, [pc, #28]	@ (8002e80 <pxCurrentTCBConst2>)
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	6808      	ldr	r0, [r1, #0]
 8002e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e6a:	f380 8809 	msr	PSP, r0
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f380 8811 	msr	BASEPRI, r0
 8002e7a:	4770      	bx	lr
 8002e7c:	f3af 8000 	nop.w

08002e80 <pxCurrentTCBConst2>:
 8002e80:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop

08002e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002e88:	4808      	ldr	r0, [pc, #32]	@ (8002eac <prvPortStartFirstTask+0x24>)
 8002e8a:	6800      	ldr	r0, [r0, #0]
 8002e8c:	6800      	ldr	r0, [r0, #0]
 8002e8e:	f380 8808 	msr	MSP, r0
 8002e92:	f04f 0000 	mov.w	r0, #0
 8002e96:	f380 8814 	msr	CONTROL, r0
 8002e9a:	b662      	cpsie	i
 8002e9c:	b661      	cpsie	f
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	df00      	svc	0
 8002ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002eaa:	bf00      	nop
 8002eac:	e000ed08 	.word	0xe000ed08

08002eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002eb6:	4b47      	ldr	r3, [pc, #284]	@ (8002fd4 <xPortStartScheduler+0x124>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a47      	ldr	r2, [pc, #284]	@ (8002fd8 <xPortStartScheduler+0x128>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10b      	bne.n	8002ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	613b      	str	r3, [r7, #16]
}
 8002ed2:	bf00      	nop
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8002fd4 <xPortStartScheduler+0x124>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a3f      	ldr	r2, [pc, #252]	@ (8002fdc <xPortStartScheduler+0x12c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10b      	bne.n	8002efa <xPortStartScheduler+0x4a>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	60fb      	str	r3, [r7, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	e7fd      	b.n	8002ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002efa:	4b39      	ldr	r3, [pc, #228]	@ (8002fe0 <xPortStartScheduler+0x130>)
 8002efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	22ff      	movs	r2, #255	@ 0xff
 8002f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4b31      	ldr	r3, [pc, #196]	@ (8002fe4 <xPortStartScheduler+0x134>)
 8002f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f22:	4b31      	ldr	r3, [pc, #196]	@ (8002fe8 <xPortStartScheduler+0x138>)
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f28:	e009      	b.n	8002f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe8 <xPortStartScheduler+0x138>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe8 <xPortStartScheduler+0x138>)
 8002f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d0ef      	beq.n	8002f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f4a:	4b27      	ldr	r3, [pc, #156]	@ (8002fe8 <xPortStartScheduler+0x138>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1c3 0307 	rsb	r3, r3, #7
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d00b      	beq.n	8002f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	60bb      	str	r3, [r7, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	e7fd      	b.n	8002f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe8 <xPortStartScheduler+0x138>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <xPortStartScheduler+0x138>)
 8002f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe8 <xPortStartScheduler+0x138>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f80:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <xPortStartScheduler+0x138>)
 8002f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f8c:	4b17      	ldr	r3, [pc, #92]	@ (8002fec <xPortStartScheduler+0x13c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a16      	ldr	r2, [pc, #88]	@ (8002fec <xPortStartScheduler+0x13c>)
 8002f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f98:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <xPortStartScheduler+0x13c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	@ (8002fec <xPortStartScheduler+0x13c>)
 8002f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002fa4:	f000 f8da 	bl	800315c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002fa8:	4b11      	ldr	r3, [pc, #68]	@ (8002ff0 <xPortStartScheduler+0x140>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002fae:	f000 f8f9 	bl	80031a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <xPortStartScheduler+0x144>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff4 <xPortStartScheduler+0x144>)
 8002fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002fbe:	f7ff ff63 	bl	8002e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002fc2:	f7ff f83d 	bl	8002040 <vTaskSwitchContext>
	prvTaskExitError();
 8002fc6:	f7ff ff1b 	bl	8002e00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	e000ed00 	.word	0xe000ed00
 8002fd8:	410fc271 	.word	0x410fc271
 8002fdc:	410fc270 	.word	0x410fc270
 8002fe0:	e000e400 	.word	0xe000e400
 8002fe4:	20000d64 	.word	0x20000d64
 8002fe8:	20000d68 	.word	0x20000d68
 8002fec:	e000ed20 	.word	0xe000ed20
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	e000ef34 	.word	0xe000ef34

08002ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	607b      	str	r3, [r7, #4]
}
 8003010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <vPortEnterCritical+0x5c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	4a0e      	ldr	r2, [pc, #56]	@ (8003054 <vPortEnterCritical+0x5c>)
 800301a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800301c:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <vPortEnterCritical+0x5c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d110      	bne.n	8003046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003024:	4b0c      	ldr	r3, [pc, #48]	@ (8003058 <vPortEnterCritical+0x60>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <vPortEnterCritical+0x4e>
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	603b      	str	r3, [r7, #0]
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	e7fd      	b.n	8003042 <vPortEnterCritical+0x4a>
	}
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000010 	.word	0x20000010
 8003058:	e000ed04 	.word	0xe000ed04

0800305c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003062:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <vPortExitCritical+0x50>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <vPortExitCritical+0x26>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	607b      	str	r3, [r7, #4]
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003082:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <vPortExitCritical+0x50>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3b01      	subs	r3, #1
 8003088:	4a08      	ldr	r2, [pc, #32]	@ (80030ac <vPortExitCritical+0x50>)
 800308a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800308c:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <vPortExitCritical+0x50>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <vPortExitCritical+0x44>
 8003094:	2300      	movs	r3, #0
 8003096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f383 8811 	msr	BASEPRI, r3
}
 800309e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	20000010 	.word	0x20000010

080030b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80030b0:	f3ef 8009 	mrs	r0, PSP
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <pxCurrentTCBConst>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	f01e 0f10 	tst.w	lr, #16
 80030c0:	bf08      	it	eq
 80030c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80030c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ca:	6010      	str	r0, [r2, #0]
 80030cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80030d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80030d4:	f380 8811 	msr	BASEPRI, r0
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f7fe ffae 	bl	8002040 <vTaskSwitchContext>
 80030e4:	f04f 0000 	mov.w	r0, #0
 80030e8:	f380 8811 	msr	BASEPRI, r0
 80030ec:	bc09      	pop	{r0, r3}
 80030ee:	6819      	ldr	r1, [r3, #0]
 80030f0:	6808      	ldr	r0, [r1, #0]
 80030f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f6:	f01e 0f10 	tst.w	lr, #16
 80030fa:	bf08      	it	eq
 80030fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003100:	f380 8809 	msr	PSP, r0
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	f3af 8000 	nop.w

08003110 <pxCurrentTCBConst>:
 8003110:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop

08003118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
	__asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	607b      	str	r3, [r7, #4]
}
 8003130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003132:	f7fe fecb 	bl	8001ecc <xTaskIncrementTick>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <xPortSysTickHandler+0x40>)
 800313e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	2300      	movs	r3, #0
 8003146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	f383 8811 	msr	BASEPRI, r3
}
 800314e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <vPortSetupTimerInterrupt+0x34>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003166:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <vPortSetupTimerInterrupt+0x38>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800316c:	4b0a      	ldr	r3, [pc, #40]	@ (8003198 <vPortSetupTimerInterrupt+0x3c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <vPortSetupTimerInterrupt+0x40>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	4a09      	ldr	r2, [pc, #36]	@ (80031a0 <vPortSetupTimerInterrupt+0x44>)
 800317a:	3b01      	subs	r3, #1
 800317c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800317e:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <vPortSetupTimerInterrupt+0x34>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010
 8003194:	e000e018 	.word	0xe000e018
 8003198:	20000004 	.word	0x20000004
 800319c:	10624dd3 	.word	0x10624dd3
 80031a0:	e000e014 	.word	0xe000e014

080031a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80031a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80031b4 <vPortEnableVFP+0x10>
 80031a8:	6801      	ldr	r1, [r0, #0]
 80031aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80031ae:	6001      	str	r1, [r0, #0]
 80031b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80031b2:	bf00      	nop
 80031b4:	e000ed88 	.word	0xe000ed88

080031b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80031be:	f3ef 8305 	mrs	r3, IPSR
 80031c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b0f      	cmp	r3, #15
 80031c8:	d915      	bls.n	80031f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80031ca:	4a18      	ldr	r2, [pc, #96]	@ (800322c <vPortValidateInterruptPriority+0x74>)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80031d4:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <vPortValidateInterruptPriority+0x78>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	7afa      	ldrb	r2, [r7, #11]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d20b      	bcs.n	80031f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	607b      	str	r3, [r7, #4]
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	e7fd      	b.n	80031f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <vPortValidateInterruptPriority+0x7c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <vPortValidateInterruptPriority+0x80>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d90b      	bls.n	800321e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	603b      	str	r3, [r7, #0]
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	e7fd      	b.n	800321a <vPortValidateInterruptPriority+0x62>
	}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000e3f0 	.word	0xe000e3f0
 8003230:	20000d64 	.word	0x20000d64
 8003234:	e000ed0c 	.word	0xe000ed0c
 8003238:	20000d68 	.word	0x20000d68

0800323c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	@ 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003248:	f7fe fd84 	bl	8001d54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800324c:	4b5c      	ldr	r3, [pc, #368]	@ (80033c0 <pvPortMalloc+0x184>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003254:	f000 f924 	bl	80034a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003258:	4b5a      	ldr	r3, [pc, #360]	@ (80033c4 <pvPortMalloc+0x188>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	f040 8095 	bne.w	8003390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01e      	beq.n	80032aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800326c:	2208      	movs	r2, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	2b00      	cmp	r3, #0
 800327c:	d015      	beq.n	80032aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f023 0307 	bic.w	r3, r3, #7
 8003284:	3308      	adds	r3, #8
 8003286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <pvPortMalloc+0x6e>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	617b      	str	r3, [r7, #20]
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	e7fd      	b.n	80032a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d06f      	beq.n	8003390 <pvPortMalloc+0x154>
 80032b0:	4b45      	ldr	r3, [pc, #276]	@ (80033c8 <pvPortMalloc+0x18c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d86a      	bhi.n	8003390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80032ba:	4b44      	ldr	r3, [pc, #272]	@ (80033cc <pvPortMalloc+0x190>)
 80032bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80032be:	4b43      	ldr	r3, [pc, #268]	@ (80033cc <pvPortMalloc+0x190>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032c4:	e004      	b.n	80032d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d903      	bls.n	80032e2 <pvPortMalloc+0xa6>
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f1      	bne.n	80032c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80032e2:	4b37      	ldr	r3, [pc, #220]	@ (80033c0 <pvPortMalloc+0x184>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d051      	beq.n	8003390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2208      	movs	r2, #8
 80032f2:	4413      	add	r3, r2
 80032f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	1ad2      	subs	r2, r2, r3
 8003306:	2308      	movs	r3, #8
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	429a      	cmp	r2, r3
 800330c:	d920      	bls.n	8003350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800330e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <pvPortMalloc+0xfc>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	613b      	str	r3, [r7, #16]
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad2      	subs	r2, r2, r3
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800334a:	69b8      	ldr	r0, [r7, #24]
 800334c:	f000 f90a 	bl	8003564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003350:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <pvPortMalloc+0x18c>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	4a1b      	ldr	r2, [pc, #108]	@ (80033c8 <pvPortMalloc+0x18c>)
 800335c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800335e:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <pvPortMalloc+0x18c>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <pvPortMalloc+0x194>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d203      	bcs.n	8003372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800336a:	4b17      	ldr	r3, [pc, #92]	@ (80033c8 <pvPortMalloc+0x18c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <pvPortMalloc+0x194>)
 8003370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4b13      	ldr	r3, [pc, #76]	@ (80033c4 <pvPortMalloc+0x188>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	431a      	orrs	r2, r3
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003386:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <pvPortMalloc+0x198>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	4a11      	ldr	r2, [pc, #68]	@ (80033d4 <pvPortMalloc+0x198>)
 800338e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003390:	f7fe fcee 	bl	8001d70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <pvPortMalloc+0x17a>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	60fb      	str	r3, [r7, #12]
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	e7fd      	b.n	80033b2 <pvPortMalloc+0x176>
	return pvReturn;
 80033b6:	69fb      	ldr	r3, [r7, #28]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20004974 	.word	0x20004974
 80033c4:	20004988 	.word	0x20004988
 80033c8:	20004978 	.word	0x20004978
 80033cc:	2000496c 	.word	0x2000496c
 80033d0:	2000497c 	.word	0x2000497c
 80033d4:	20004980 	.word	0x20004980

080033d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d04f      	beq.n	800348a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033ea:	2308      	movs	r3, #8
 80033ec:	425b      	negs	r3, r3
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4413      	add	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	4b25      	ldr	r3, [pc, #148]	@ (8003494 <vPortFree+0xbc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <vPortFree+0x46>
	__asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	60fb      	str	r3, [r7, #12]
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	e7fd      	b.n	800341a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <vPortFree+0x66>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	60bb      	str	r3, [r7, #8]
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	e7fd      	b.n	800343a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <vPortFree+0xbc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01e      	beq.n	800348a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11a      	bne.n	800348a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4b0e      	ldr	r3, [pc, #56]	@ (8003494 <vPortFree+0xbc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	43db      	mvns	r3, r3
 800345e:	401a      	ands	r2, r3
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003464:	f7fe fc76 	bl	8001d54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <vPortFree+0xc0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4413      	add	r3, r2
 8003472:	4a09      	ldr	r2, [pc, #36]	@ (8003498 <vPortFree+0xc0>)
 8003474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003476:	6938      	ldr	r0, [r7, #16]
 8003478:	f000 f874 	bl	8003564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800347c:	4b07      	ldr	r3, [pc, #28]	@ (800349c <vPortFree+0xc4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	4a06      	ldr	r2, [pc, #24]	@ (800349c <vPortFree+0xc4>)
 8003484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003486:	f7fe fc73 	bl	8001d70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20004988 	.word	0x20004988
 8003498:	20004978 	.word	0x20004978
 800349c:	20004984 	.word	0x20004984

080034a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80034aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80034ac:	4b27      	ldr	r3, [pc, #156]	@ (800354c <prvHeapInit+0xac>)
 80034ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3307      	adds	r3, #7
 80034be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	4a1f      	ldr	r2, [pc, #124]	@ (800354c <prvHeapInit+0xac>)
 80034d0:	4413      	add	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003550 <prvHeapInit+0xb0>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80034de:	4b1c      	ldr	r3, [pc, #112]	@ (8003550 <prvHeapInit+0xb0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	4413      	add	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034ec:	2208      	movs	r2, #8
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0307 	bic.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <prvHeapInit+0xb4>)
 8003500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003502:	4b14      	ldr	r3, [pc, #80]	@ (8003554 <prvHeapInit+0xb4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <prvHeapInit+0xb4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003520:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <prvHeapInit+0xb4>)
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <prvHeapInit+0xb8>)
 800352e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a09      	ldr	r2, [pc, #36]	@ (800355c <prvHeapInit+0xbc>)
 8003536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003538:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <prvHeapInit+0xc0>)
 800353a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800353e:	601a      	str	r2, [r3, #0]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	20000d6c 	.word	0x20000d6c
 8003550:	2000496c 	.word	0x2000496c
 8003554:	20004974 	.word	0x20004974
 8003558:	2000497c 	.word	0x2000497c
 800355c:	20004978 	.word	0x20004978
 8003560:	20004988 	.word	0x20004988

08003564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800356c:	4b28      	ldr	r3, [pc, #160]	@ (8003610 <prvInsertBlockIntoFreeList+0xac>)
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e002      	b.n	8003578 <prvInsertBlockIntoFreeList+0x14>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d8f7      	bhi.n	8003572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4413      	add	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d108      	bne.n	80035a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	441a      	add	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	441a      	add	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d118      	bne.n	80035ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <prvInsertBlockIntoFreeList+0xb0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d00d      	beq.n	80035e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e008      	b.n	80035f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <prvInsertBlockIntoFreeList+0xb0>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e003      	b.n	80035f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d002      	beq.n	8003602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	2000496c 	.word	0x2000496c
 8003614:	20004974 	.word	0x20004974

08003618 <memset>:
 8003618:	4402      	add	r2, r0
 800361a:	4603      	mov	r3, r0
 800361c:	4293      	cmp	r3, r2
 800361e:	d100      	bne.n	8003622 <memset+0xa>
 8003620:	4770      	bx	lr
 8003622:	f803 1b01 	strb.w	r1, [r3], #1
 8003626:	e7f9      	b.n	800361c <memset+0x4>

08003628 <__libc_init_array>:
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	4d0d      	ldr	r5, [pc, #52]	@ (8003660 <__libc_init_array+0x38>)
 800362c:	4c0d      	ldr	r4, [pc, #52]	@ (8003664 <__libc_init_array+0x3c>)
 800362e:	1b64      	subs	r4, r4, r5
 8003630:	10a4      	asrs	r4, r4, #2
 8003632:	2600      	movs	r6, #0
 8003634:	42a6      	cmp	r6, r4
 8003636:	d109      	bne.n	800364c <__libc_init_array+0x24>
 8003638:	4d0b      	ldr	r5, [pc, #44]	@ (8003668 <__libc_init_array+0x40>)
 800363a:	4c0c      	ldr	r4, [pc, #48]	@ (800366c <__libc_init_array+0x44>)
 800363c:	f000 f826 	bl	800368c <_init>
 8003640:	1b64      	subs	r4, r4, r5
 8003642:	10a4      	asrs	r4, r4, #2
 8003644:	2600      	movs	r6, #0
 8003646:	42a6      	cmp	r6, r4
 8003648:	d105      	bne.n	8003656 <__libc_init_array+0x2e>
 800364a:	bd70      	pop	{r4, r5, r6, pc}
 800364c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003650:	4798      	blx	r3
 8003652:	3601      	adds	r6, #1
 8003654:	e7ee      	b.n	8003634 <__libc_init_array+0xc>
 8003656:	f855 3b04 	ldr.w	r3, [r5], #4
 800365a:	4798      	blx	r3
 800365c:	3601      	adds	r6, #1
 800365e:	e7f2      	b.n	8003646 <__libc_init_array+0x1e>
 8003660:	08003728 	.word	0x08003728
 8003664:	08003728 	.word	0x08003728
 8003668:	08003728 	.word	0x08003728
 800366c:	0800372c 	.word	0x0800372c

08003670 <memcpy>:
 8003670:	440a      	add	r2, r1
 8003672:	4291      	cmp	r1, r2
 8003674:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003678:	d100      	bne.n	800367c <memcpy+0xc>
 800367a:	4770      	bx	lr
 800367c:	b510      	push	{r4, lr}
 800367e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003686:	4291      	cmp	r1, r2
 8003688:	d1f9      	bne.n	800367e <memcpy+0xe>
 800368a:	bd10      	pop	{r4, pc}

0800368c <_init>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr

08003698 <_fini>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr
